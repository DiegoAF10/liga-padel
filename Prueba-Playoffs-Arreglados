<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Liga de PÃ¡del - Sistema Completo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #2E7D32;
            --primary-dark: #1B5E20;
            --secondary: #FF6F00;
            --accent: #FFC107;
            --bg-light: #F5F5F5;
            --bg-white: #FFFFFF;
            --text-dark: #212121;
            --text-light: #757575;
            --border: #E0E0E0;
            --success: #4CAF50;
            --warning: #FF9800;
            --error: #F44336;
            --shadow: rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--bg-light);
            color: var(--text-dark);
            line-height: 1.6;
        }

        body.dark-mode {
            --bg-light: #121212;
            --bg-white: #1E1E1E;
            --text-dark: #FFFFFF;
            --text-light: #B0B0B0;
            --border: #333333;
            --shadow: rgba(255, 255, 255, 0.1);
        }

        /* Header */
        header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: white;
            padding: 1.5rem 2rem;
            box-shadow: 0 2px 10px var(--shadow);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 1.5rem;
            font-weight: bold;
        }

        .logo-icon {
            font-size: 2rem;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .season-selector {
            padding: 0.5rem 1rem;
            border: 2px solid white;
            background: transparent;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.95rem;
            font-weight: 500;
        }

        .theme-toggle {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1.2rem;
            transition: background 0.3s;
        }

        .theme-toggle:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        /* Navigation */
        nav {
            background: var(--bg-white);
            box-shadow: 0 2px 5px var(--shadow);
            position: sticky;
            top: 75px;
            z-index: 999;
        }

        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            overflow-x: auto;
        }

        .nav-item {
            padding: 1rem 1.5rem;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            white-space: nowrap;
            transition: all 0.3s;
            font-weight: 500;
            color: var(--text-light);
        }

        .nav-item:hover {
            background: var(--bg-light);
            color: var(--primary);
        }

        .nav-item.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
            background: var(--bg-light);
        }

        /* Main Content */
        main {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 2rem;
        }

        .section {
            display: none;
            animation: fadeIn 0.3s;
        }

        .section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Cards */
        .card {
            background: var(--bg-white);
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 8px var(--shadow);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--border);
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-dark);
        }

        /* Buttons */
        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px var(--shadow);
        }

        .btn-primary:disabled {
            background: var(--text-light);
            cursor: not-allowed;
            transform: none;
        }

        .btn-secondary {
            background: var(--secondary);
            color: white;
        }

        .btn-secondary:hover {
            background: #E65100;
        }

        .btn-outline {
            background: transparent;
            border: 2px solid var(--primary);
            color: var(--primary);
        }

        .btn-outline:hover {
            background: var(--primary);
            color: white;
        }

        .btn-danger {
            background: var(--error);
            color: white;
        }

        .btn-danger:hover {
            background: #D32F2F;
        }

        .btn-cancel {
            background: var(--text-light);
            color: white;
        }

        .btn-cancel:hover {
            background: #616161;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 4px 12px var(--shadow);
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
            margin-bottom: 0.5rem;
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: bold;
        }

        .stat-icon {
            font-size: 3rem;
            opacity: 0.3;
            float: right;
            margin-top: -1rem;
        }

        /* Table */
        .table-container {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--border);
        }

        th {
            background: var(--bg-light);
            font-weight: 600;
            color: var(--text-dark);
        }

        tr:hover {
            background: var(--bg-light);
        }

        /* Badge */
        .badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .badge-gold {
            background: #FFD700;
            color: #000;
        }

        .badge-silver {
            background: #C0C0C0;
            color: #000;
        }

        .badge-bronze {
            background: #CD7F32;
            color: #fff;
        }

        /* Alert */
        .alert {
            padding: 1rem 1.5rem;
            border-radius: 5px;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .alert-info {
            background: #E3F2FD;
            color: #1565C0;
            border-left: 4px solid #1565C0;
        }

        .alert-success {
            background: #E8F5E9;
            color: #2E7D32;
            border-left: 4px solid #2E7D32;
        }

        .alert-warning {
            background: #FFF3E0;
            color: #E65100;
            border-left: 4px solid #E65100;
        }

        /* Loading Spinner */
        .spinner {
            border: 3px solid var(--border);
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 2rem auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10001;
        }

        .loading-content {
            background: var(--bg-white);
            padding: 2rem;
            border-radius: 10px;
            text-align: center;
        }

        /* Search/Filter Bar */
        .filter-bar {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }

        .filter-input {
            padding: 0.75rem;
            border: 2px solid var(--border);
            border-radius: 5px;
            font-size: 1rem;
            flex: 1;
            min-width: 200px;
        }

        .filter-input:focus {
            outline: none;
            border-color: var(--primary);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 10000;
            justify-content: center;
            align-items: center;
            overflow-y: auto;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: var(--bg-white);
            border-radius: 10px;
            padding: 2rem;
            max-width: 800px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--border);
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-dark);
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-light);
            transition: color 0.3s;
        }

        .modal-close:hover {
            color: var(--error);
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }

        /* Form */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-dark);
        }

        .form-input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid var(--border);
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary);
        }

        .form-error {
            color: var(--error);
            font-size: 0.85rem;
            margin-top: 0.25rem;
            display: none;
        }

        /* Action buttons in table */
        .action-btn {
            padding: 0.5rem 0.75rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
            margin-right: 0.5rem;
            transition: all 0.3s;
        }

        .action-btn-edit {
            background: #2196F3;
            color: white;
        }

        .action-btn-edit:hover {
            background: #1976D2;
        }

        .action-btn-delete {
            background: var(--error);
            color: white;
        }

        .action-btn-delete:hover {
            background: #D32F2F;
        }

        .action-btn-toggle {
            background: var(--warning);
            color: white;
        }

        .action-btn-toggle:hover {
            background: #F57C00;
        }

        /* Match card */
        .match-card {
            background: var(--bg-white);
            border: 2px solid var(--border);
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
            transition: all 0.3s;
        }

        .match-card:hover {
            border-color: var(--primary);
            box-shadow: 0 4px 12px var(--shadow);
        }

        .match-card.completed {
            border-left: 4px solid var(--success);
        }

        .match-card.walkover {
            border-left: 4px solid var(--warning);
            background: rgba(255, 152, 0, 0.05);
        }

        .match-card.pending {
            border-left: 4px solid var(--text-light);
        }

        .match-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .match-teams {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .match-team {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            border-radius: 5px;
            background: var(--bg-light);
        }

        .match-team.winner {
            background: rgba(76, 175, 80, 0.1);
            border: 2px solid var(--success);
        }

        .match-score {
            font-weight: bold;
            font-size: 1.2rem;
            color: var(--primary);
        }

        .week-section, .group-section {
            margin-bottom: 2rem;
        }

        .week-header, .group-header {
            background: var(--primary);
            color: white;
            padding: 1rem;
            border-radius: 10px;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .group-header {
            background: linear-gradient(135deg, #FF6F00 0%, #E65100 100%);
        }

        .week-progress {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        /* Bracket styles */
        .bracket-container {
            display: flex;
            justify-content: space-around;
            align-items: center;
            gap: 2rem;
            padding: 2rem;
            background: var(--bg-light);
            border-radius: 10px;
            overflow-x: auto;
        }

        .bracket-round {
            display: flex;
            flex-direction: column;
            gap: 2rem;
            min-width: 200px;
        }

        .bracket-match {
            background: var(--bg-white);
            border: 2px solid var(--border);
            border-radius: 8px;
            padding: 1rem;
            min-height: 100px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .bracket-match.completed {
            border-color: var(--success);
        }

        .bracket-team {
            padding: 0.5rem;
            margin: 0.25rem 0;
            border-radius: 5px;
            background: var(--bg-light);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .bracket-team.winner {
            background: rgba(76, 175, 80, 0.2);
            font-weight: bold;
        }

        .bracket-score {
            font-weight: bold;
            color: var(--primary);
        }

        .standings-qualified {
            background: rgba(76, 175, 80, 0.1);
            border-left: 4px solid var(--success);
        }

        /* Rank badge */
        .rank-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 5px;
            font-size: 0.85rem;
            font-weight: 600;
            margin-left: 0.5rem;
        }

        /* Tournament card */
        .tournament-card {
            background: var(--bg-white);
            border: 2px solid var(--border);
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .tournament-card:hover {
            border-color: var(--primary);
            box-shadow: 0 4px 12px var(--shadow);
        }

        .tournament-card.selected {
            border-color: var(--primary);
            background: rgba(46, 125, 50, 0.05);
        }

        /* Footer */
        footer {
            text-align: center;
            padding: 2rem;
            color: var(--text-light);
            margin-top: 3rem;
            border-top: 1px solid var(--border);
        }

        /* Wizard */
        .wizard-steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 2rem;
            position: relative;
        }

        .wizard-steps::before {
            content: '';
            position: absolute;
            top: 20px;
            left: 0;
            right: 0;
            height: 2px;
            background: var(--border);
            z-index: 0;
        }

        .wizard-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 1;
            flex: 1;
        }

        .wizard-step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--bg-light);
            border: 2px solid var(--border);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .wizard-step.active .wizard-step-number {
            background: var(--primary);
            border-color: var(--primary);
            color: white;
        }

        .wizard-step.completed .wizard-step-number {
            background: var(--success);
            border-color: var(--success);
            color: white;
        }

        .wizard-step-label {
            font-size: 0.85rem;
            text-align: center;
            color: var(--text-light);
        }

        .wizard-step.active .wizard-step-label {
            color: var(--primary);
            font-weight: 600;
        }

        .wizard-content {
            min-height: 300px;
        }

        .wizard-panel {
            display: none;
        }

        .wizard-panel.active {
            display: block;
        }

        /* Tournament details grid */
        .details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .detail-item {
            padding: 1rem;
            background: var(--bg-light);
            border-radius: 5px;
        }

        .detail-label {
            font-size: 0.85rem;
            color: var(--text-light);
            margin-bottom: 0.25rem;
        }

        .detail-value {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--text-dark);
        }

        /* Player grid */
        .player-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            max-height: 400px;
            overflow-y: auto;
        }

        .player-checkbox {
            display: flex;
            align-items: center;
            padding: 1rem;
            border: 2px solid var(--border);
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .player-checkbox:hover {
            border-color: var(--primary);
            background: rgba(46, 125, 50, 0.05);
        }

        .player-checkbox input[type="checkbox"] {
            margin-right: 0.5rem;
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .player-checkbox.selected {
            border-color: var(--primary);
            background: rgba(46, 125, 50, 0.1);
        }

        /* Pairs formation */
        .pairs-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }

        .pair-card {
            background: var(--bg-light);
            border: 2px solid var(--border);
            border-radius: 10px;
            padding: 1rem;
        }

        .pair-header {
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--primary);
        }

        .pair-players {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .pair-player-select {
            width: 100%;
            padding: 0.5rem;
            border: 2px solid var(--border);
            border-radius: 5px;
            background: var(--bg-white);
        }

        /* Set input */
        .set-inputs {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .set-input-group {
            display: flex;
            flex-direction: column;
        }

        .set-input-row {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .set-input {
            width: 60px;
            padding: 0.5rem;
            border: 2px solid var(--border);
            border-radius: 5px;
            font-size: 1.1rem;
            font-weight: bold;
            text-align: center;
        }

        .set-input:focus {
            outline: none;
            border-color: var(--primary);
        }

        .vs-divider {
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: var(--text-light);
        }

        /* Checkbox group */
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .checkbox-group input[type="checkbox"] {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="header-content">
            <div class="logo">
                <span class="logo-icon">ð¾</span>
                <div>
                    <div>Liga de PÃ¡del</div>
                    <div style="font-size: 0.8rem; opacity: 0.9;">Sistema Completo v2.1</div>
                </div>
            </div>
            <div class="header-actions">
                <select class="season-selector" id="seasonSelector">
                    <option value="2025">Temporada 2025</option>
                </select>
                <button class="theme-toggle" id="themeToggle" title="Cambiar tema">ð</button>
            </div>
        </div>
    </header>

    <!-- Navigation -->
    <nav>
        <div class="nav-container">
            <div class="nav-item active" data-section="dashboard">ð Dashboard</div>
            <div class="nav-item" data-section="players">ð¥ Jugadores</div>
            <div class="nav-item" data-section="tournament">ð Torneos</div>
            <div class="nav-item" data-section="calendar">ð Calendario</div>
            <div class="nav-item" data-section="standings">ð Posiciones</div>
            <div class="nav-item" data-section="playoffs">ð¥ Playoffs</div>
            <div class="nav-item" data-section="ranking">â­ Ranking</div>
            <div class="nav-item" data-section="data">ð¾ Datos</div>
        </div>
    </nav>

    <!-- Main Content -->
    <main>
        <!-- Dashboard Section -->
        <section id="dashboard" class="section active">
            <div class="alert alert-info">
                <span>â¹ï¸</span>
                <div>
                    <strong>Sistema de GestiÃ³n de Liga de PÃ¡del v2.1</strong><br>
                    Temporada: <strong id="currentSeason">2025</strong> | 
                    Jugadores: <strong id="totalPlayers">16</strong>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stat-card">
                    <span class="stat-icon">ð¥</span>
                    <div class="stat-label">Jugadores Activos</div>
                    <div class="stat-value" id="statPlayers">16</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #FF6F00 0%, #E65100 100%);">
                    <span class="stat-icon">ð</span>
                    <div class="stat-label">Torneos Completados</div>
                    <div class="stat-value" id="statTournaments">0</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #FFC107 0%, #FFA000 100%);">
                    <span class="stat-icon">â¡</span>
                    <div class="stat-label">Partidos Jugados</div>
                    <div class="stat-value" id="statMatches">0</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #9C27B0 0%, #7B1FA2 100%);">
                    <span class="stat-icon">ð</span>
                    <div class="stat-label">LÃ­der del Ranking</div>
                    <div class="stat-value" style="font-size: 1.5rem;" id="statLeader">-</div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Top 5 - Ranking Individual</h2>
                    <button class="btn btn-outline" onclick="showSection('ranking')">Ver Ranking Completo</button>
                </div>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Pos</th>
                                <th>Jugador</th>
                                <th>Puntos</th>
                                <th>TÃ­tulos</th>
                                <th>V-D</th>
                            </tr>
                        </thead>
                        <tbody id="topPlayersTable">
                            <tr>
                                <td colspan="5" style="text-align: center; padding: 2rem; color: var(--text-light);">
                                    No hay datos de ranking disponibles aÃºn
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </section>

        <!-- Players Section -->
        <section id="players" class="section">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">GestiÃ³n de Jugadores</h2>
                    <button class="btn btn-primary" onclick="openPlayerModal()">
                        â Agregar Jugador
                    </button>
                </div>
                <div class="filter-bar">
                    <input type="text" id="playerSearch" class="filter-input" placeholder="ð Buscar jugador...">
                </div>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Ranking</th>
                                <th>Partidos</th>
                                <th>V-D</th>
                                <th>TÃ­tulos</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="playersTable"></tbody>
                    </table>
                </div>
            </div>
        </section>

        <!-- Tournament Section -->
        <section id="tournament" class="section">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">GestiÃ³n de Torneos</h2>
                    <button class="btn btn-primary" onclick="openTournamentWizard()">
                        â Crear Nuevo Torneo
                    </button>
<button class="btn btn-secondary" onclick="openImportTournamentModal()" style="margin-left: 1rem;">
    ð Importar Torneo Jugado
</button>
                </div>
                <div id="tournamentsList"></div>
            </div>
        </section>

        <!-- Calendar Section -->
        <section id="calendar" class="section">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Calendario de Partidos</h2>
                    <div style="display: flex; gap: 1rem;">
                        <select id="calendarTournamentSelect" class="form-input" style="width: 250px;" onchange="renderCalendar()">
                            <option value="">Seleccionar torneo...</option>
                        </select>
                        <button class="btn btn-primary" onclick="generateFixture()">â¡ Generar Fixture</button>
                    </div>
                </div>
                <div id="calendarContent"></div>
            </div>
        </section>

        <!-- Standings Section -->
        <section id="standings" class="section">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Tabla de Posiciones</h2>
                    <select id="standingsTournamentSelect" class="form-input" style="width: 250px;" onchange="renderStandings()">
                        <option value="">Seleccionar torneo...</option>
                    </select>
                </div>
                <div id="standingsContent"></div>
            </div>
        </section>

        <!-- Playoffs Section -->
        <section id="playoffs" class="section">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Playoffs</h2>
                    <select id="playoffsTournamentSelect" class="form-input" style="width: 250px;" onchange="renderPlayoffs()">
                        <option value="">Seleccionar torneo...</option>
                    </select>
                </div>
                <div id="playoffsContent"></div>
            </div>
        </section>

        <!-- Ranking Section -->
        <section id="ranking" class="section">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Ranking Individual</h2>
                    <button class="btn btn-outline" onclick="recalculateAllRankings()">ð Recalcular Rankings</button>
                </div>
                <div class="filter-bar">
                    <input type="text" id="rankingSearch" class="filter-input" placeholder="ð Buscar jugador..." oninput="renderRankingTable()">
                    <select id="rankingFilter" class="form-input" style="width: 200px;" onchange="renderRankingTable()">
                        <option value="all">Todos los jugadores</option>
                        <option value="active">Solo activos</option>
                        <option value="inactive">Solo inactivos</option>
                    </select>
                    <select id="rankingPointsFilter" class="form-input" style="width: 200px;" onchange="renderRankingTable()">
                        <option value="all">Todos los puntos</option>
                        <option value="5000+">5000+ pts</option>
                        <option value="3000-5000">3000-5000 pts</option>
                        <option value="1000-3000">1000-3000 pts</option>
                        <option value="0-1000">0-1000 pts</option>
                    </select>
                </div>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Pos</th>
                                <th>Jugador</th>
                                <th>Puntos</th>
                                <th>Torneos</th>
                                <th>TÃ­tulos</th>
                                <th>Subcampeonatos</th>
                                <th>V-D</th>
                                <th>% Victoria</th>
                            </tr>
                        </thead>
                        <tbody id="rankingTable"></tbody>
                    </table>
                </div>
            </div>
        </section>

        <!-- Data Section -->
        <section id="data" class="section">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">GestiÃ³n de Datos</h2>
                </div>

                <div class="alert alert-info">
                    <span>â¹ï¸</span>
                    <div>
                        Desde aquÃ­ puedes exportar, importar o eliminar todos los datos del sistema.
                    </div>
                </div>

                <div style="margin-bottom: 2rem;">
                    <h3 style="margin-bottom: 1rem;">Estado Actual del Sistema</h3>
                    <div style="background: var(--bg-light); padding: 1.5rem; border-radius: 5px;">
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
                            <div>
                                <div style="color: var(--text-light); font-size: 0.9rem;">Temporada Actual</div>
                                <div style="font-size: 1.5rem; font-weight: bold;" id="dataCurrentSeason">-</div>
                            </div>
                            <div>
                                <div style="color: var(--text-light); font-size: 0.9rem;">Jugadores</div>
                                <div style="font-size: 1.5rem; font-weight: bold;" id="dataPlayerCount">-</div>
                            </div>
                            <div>
                                <div style="color: var(--text-light); font-size: 0.9rem;">Torneos</div>
                                <div style="font-size: 1.5rem; font-weight: bold;" id="dataTournamentCount">-</div>
                            </div>
                            <div>
                                <div style="color: var(--text-light); font-size: 0.9rem;">TamaÃ±o Total</div>
                                <div style="font-size: 1.5rem; font-weight: bold;" id="dataStorageSize">-</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div style="margin-bottom: 2rem;">
                    <h3 style="margin-bottom: 1rem;">Backup y RestauraciÃ³n</h3>
                    <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                        <button class="btn btn-primary" onclick="exportBackup()">
                            ð¥ Exportar Backup (JSON)
                        </button>
                        <button class="btn btn-outline" onclick="document.getElementById('importBackupFile').click()">
                            ð¤ Importar Backup
                        </button>
                        <input type="file" id="importBackupFile" accept=".json" style="display: none;" onchange="importBackup(event)">
                    </div>
                </div>

                <div style="margin-bottom: 2rem;">
                    <h3 style="margin-bottom: 1rem;">Opciones de Borrado</h3>
                    <div class="alert alert-warning">
                        <span>â ï¸</span>
                        <div>
                            <strong>Â¡ADVERTENCIA!</strong> Estas acciones son irreversibles. 
                            Recomendamos hacer un backup antes de borrar datos.
                        </div>
                    </div>
                    <div style="display: flex; flex-direction: column; gap: 1rem;">
                        <button class="btn" style="background: #FF9800; color: white;" onclick="deleteCurrentSeasonData()">
                            ðï¸ Borrar Datos de Temporada Actual
                        </button>
                        <button class="btn btn-danger" onclick="deleteAllData()">
                            â ï¸ Borrar TODOS los Datos
                        </button>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <p>Liga de PÃ¡del 2025 - Sistema Completo v2.1 | MÃ³dulos 1-8 Implementados</p>
    </footer>

    <!-- Player Modal -->
    <div id="playerModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="playerModalTitle">Agregar Jugador</h3>
                <button class="modal-close" onclick="closePlayerModal()">â</button>
            </div>
            <form id="playerForm" onsubmit="savePlayer(event)">
                <div class="form-group">
                    <label class="form-label">Nombre Completo *</label>
                    <input type="text" class="form-input" id="playerName" required placeholder="Ej: Diego Palencia">
                    <div class="form-error" id="playerNameError"></div>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn btn-cancel" onclick="closePlayerModal()">Cancelar</button>
                    <button type="submit" class="btn btn-primary" id="playerSubmitBtn">Guardar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Tournament Wizard Modal -->
    <div id="tournamentWizard" class="modal">
        <div class="modal-content" style="max-width: 800px;">
            <div class="modal-header">
                <h3 class="modal-title">Crear Nuevo Torneo</h3>
                <button class="modal-close" onclick="closeTournamentWizard()">â</button>
            </div>

            <div class="wizard-steps">
                <div class="wizard-step active" data-step="1">
                    <div class="wizard-step-number">1</div>
                    <div class="wizard-step-label">InformaciÃ³n</div>
                </div>
                <div class="wizard-step" data-step="2">
                    <div class="wizard-step-number">2</div>
                    <div class="wizard-step-label">Tipo</div>
                </div>
                <div class="wizard-step" data-step="3">
                    <div class="wizard-step-number">3</div>
                    <div class="wizard-step-label">Parejas</div>
                </div>
                <div class="wizard-step" data-step="4">
                    <div class="wizard-step-number">4</div>
                    <div class="wizard-step-label">Jugadores</div>
                </div>
                <div class="wizard-step" data-step="5">
                    <div class="wizard-step-number">5</div>
                    <div class="wizard-step-label">Resumen</div>
                </div>
            </div>

            <div class="wizard-content">
                <div id="wizardStep1" class="wizard-panel active">
                    <div class="form-group">
                        <label class="form-label">Nombre del Torneo *</label>
                        <input type="text" class="form-input" id="tournamentName" placeholder="Ej: Liga Octubre 2025">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Fecha de Inicio *</label>
                        <input type="date" class="form-input" id="tournamentDate">
                    </div>
                </div>

                <div id="wizardStep2" class="wizard-panel">
                    <h4 style="margin-bottom: 1rem;">Selecciona el tipo de torneo</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
                        <div class="tournament-card" onclick="selectTournamentType('league')">
                            <h3>ð Liga Regular</h3>
                            <p style="color: var(--text-light); margin: 0.5rem 0;">Peso: 1.0x</p>
                            <p style="font-size: 0.9rem;">Todos contra todos + playoffs opcionales.</p>
                        </div>
                        <div class="tournament-card" onclick="selectTournamentType('cup')">
                            <h3>ð Copa Express</h3>
                            <p style="color: var(--text-light); margin: 0.5rem 0;">Peso: 0.7x</p>
                            <p style="font-size: 0.9rem;">Grupos + eliminaciÃ³n directa.</p>
                        </div>
                        <div class="tournament-card" onclick="selectTournamentType('special')">
                            <h3>â­ Campeonato Especial</h3>
                            <p style="color: var(--text-light); margin: 0.5rem 0;">Peso: 1.5x</p>
                            <p style="font-size: 0.9rem;">Mayor prestigio. Sin decaimiento.</p>
                        </div>
                    </div>
                    <input type="hidden" id="tournamentType">

                    <div id="roundsSelectionSection" style="display: none; margin-top: 1.5rem;">
                        <h4 style="margin-bottom: 1rem;">Â¿CuÃ¡ntas vueltas?</h4>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                            <div class="tournament-card" onclick="selectRounds(1)">
                                <h3>1 Vuelta</h3>
                                <p style="font-size: 0.9rem;">Cada pareja juega 1 vez</p>
                            </div>
                            <div class="tournament-card" onclick="selectRounds(2)">
                                <h3>2 Vueltas</h3>
                                <p style="font-size: 0.9rem;">Ida y vuelta</p>
                            </div>
                        </div>
                        <input type="hidden" id="tournamentRounds">
                    </div>

                    <div id="playoffsSelectionSection" style="display: none; margin-top: 1.5rem;">
                        <div class="checkbox-group">
                            <input type="checkbox" id="includePlayoffs" onchange="togglePlayoffsCheckbox()">
                            <label for="includePlayoffs" style="cursor: pointer; font-weight: 600; font-size: 1.1rem;">
                                Â¿Incluir Playoffs al finalizar la fase regular?
                            </label>
                        </div>
                    </div>
                </div>

                <div id="wizardStep3" class="wizard-panel">
                    <h4 style="margin-bottom: 1rem;">Â¿CuÃ¡ntas parejas participarÃ¡n?</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;">
                        <div class="tournament-card" onclick="selectPairCount(4)">
                            <h3>4 Parejas</h3>
                            <p style="color: var(--text-light);">8 jugadores</p>
                        </div>
                        <div class="tournament-card" onclick="selectPairCount(6)">
                            <h3>6 Parejas</h3>
                            <p style="color: var(--text-light);">12 jugadores</p>
                        </div>
                        <div class="tournament-card" onclick="selectPairCount(8)">
                            <h3>8 Parejas</h3>
                            <p style="color: var(--text-light);">16 jugadores</p>
                        </div>
                        <div class="tournament-card" onclick="selectPairCount(10)">
                            <h3>10 Parejas</h3>
                            <p style="color: var(--text-light);">20 jugadores</p>
                        </div>
                    </div>
                    <input type="hidden" id="pairCount">

                    <div id="playoffsQualifiedSection" style="display: none; margin-top: 1.5rem;">
                        <div class="alert alert-info">
                            <span>â¹ï¸</span>
                            <div>
                                Has habilitado playoffs. Selecciona cuÃ¡ntas parejas clasificarÃ¡n:
                            </div>
                        </div>
                        <h4 style="margin-bottom: 1rem;">Â¿CuÃ¡ntas parejas clasifican a playoffs?</h4>
                        <div id="playoffsOptionsGrid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;">
                            <!-- Se llena dinÃ¡micamente segÃºn el nÃºmero de parejas -->
                        </div>
                        <input type="hidden" id="playoffsQualified">
                    </div>
                </div>

                <div id="wizardStep4" class="wizard-panel">
                    <h4 style="margin-bottom: 1rem;">Selecciona los jugadores</h4>
                    <div style="margin-bottom: 1rem; display: flex; justify-content: space-between;">
                        <div>
                            <span id="selectedPlayerCount">0</span> / <span id="requiredPlayerCount">0</span> seleccionados
                        </div>
                        <button type="button" class="btn btn-outline" onclick="selectAllPlayers()">â Seleccionar Todos</button>
                    </div>
                    <div class="player-grid" id="playerSelectionGrid"></div>
                </div>

                <div id="wizardStep5" class="wizard-panel">
                    <h4 style="margin-bottom: 1rem;">Forma las parejas</h4>
                    <div style="margin-bottom: 1rem;">
                        <button type="button" class="btn btn-outline" onclick="repeatLastTournamentPairs()">ð Repetir Parejas del Ãltimo Torneo</button>
                    </div>
                    <div class="pairs-container" id="pairsFormation"></div>
                </div>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn btn-cancel" id="wizardPrevBtn" onclick="previousWizardStep()" style="display: none;">
                    â Anterior
                </button>
                <button type="button" class="btn btn-cancel" onclick="closeTournamentWizard()">
                    Cancelar
                </button>
                <button type="button" class="btn btn-primary" id="wizardNextBtn" onclick="nextWizardStep()">
                    Siguiente â
                </button>
                <button type="button" class="btn btn-primary" id="wizardFinishBtn" onclick="finishTournamentCreation()" style="display: none;">
                    Crear Torneo
                </button>
            </div>
        </div>
    </div>

    <!-- Match Result Modal -->
    <div id="matchResultModal" class="modal">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3 class="modal-title">Registrar Resultado</h3>
                <button class="modal-close" onclick="closeMatchResultModal()">â</button>
            </div>

            <div id="matchInfo" style="margin-bottom: 1.5rem;"></div>

            <div class="checkbox-group">
                <input type="checkbox" id="isWalkover" onchange="toggleWalkoverMode()">
                <label for="isWalkover" style="cursor: pointer;">
                    <strong>Walkover (W.O.)</strong>
                </label>
            </div>

            <div id="normalMatchSection">
                <div class="checkbox-group">
                    <input type="checkbox" id="isIncompleteMatch">
                    <label for="isIncompleteMatch" style="cursor: pointer;">
                        Partido incompleto por tiempo
                    </label>
                </div>

                <h4 style="margin-bottom: 1rem;">Resultado set por set</h4>
                
                <div class="set-inputs">
                    <div class="set-input-group">
                        <label class="form-label">Set 1 *</label>
                        <div class="set-input-row">
                            <input type="number" class="set-input" id="set1Team1" min="0" max="7" placeholder="0">
                            <div class="vs-divider">-</div>
                            <input type="number" class="set-input" id="set1Team2" min="0" max="7" placeholder="0">
                        </div>
                    </div>
                    <div class="set-input-group">
                        <label class="form-label">Set 2 *</label>
                        <div class="set-input-row">
                            <input type="number" class="set-input" id="set2Team1" min="0" max="7" placeholder="0">
                            <div class="vs-divider">-</div>
                            <input type="number" class="set-input" id="set2Team2" min="0" max="7" placeholder="0">
                        </div>
                    </div>
                    <div class="set-input-group">
                        <label class="form-label">Set 3</label>
                        <div class="set-input-row">
                            <input type="number" class="set-input" id="set3Team1" min="0" max="7" placeholder="0">
                            <div class="vs-divider">-</div>
                            <input type="number" class="set-input" id="set3Team2" min="0" max="7" placeholder="0">
                        </div>
                    </div>
                </div>

                <div class="form-error" id="matchResultError" style="display: none;"></div>
            </div>

            <div id="walkoverSection" style="display: none;">
                <div class="form-group">
                    <label class="form-label">Pareja que ganÃ³ por W.O. *</label>
                    <select class="form-input" id="walkoverWinner">
                        <option value="">Seleccionar...</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">RazÃ³n del Walkover *</label>
                    <select class="form-input" id="walkoverReason" onchange="toggleCustomReason()">
                        <option value="">Seleccionar...</option>
                        <option value="late_5_14">Atraso 5-14 minutos</option>
                        <option value="late_15_plus">Atraso 15+ minutos</option>
                        <option value="no_show">No se presentÃ³</option>
                        <option value="injury">LesiÃ³n</option>
                        <option value="other">Otra razÃ³n</option>
                    </select>
                </div>

                <div class="form-group" id="customReasonGroup" style="display: none;">
                    <label class="form-label">DescripciÃ³n</label>
                    <textarea class="form-input" id="customReason" rows="3"></textarea>
                </div>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn btn-cancel" onclick="closeMatchResultModal()">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="saveMatchResult()">Guardar Resultado</button>
            </div>
        </div>
    </div>

    <!-- Tournament Details Modal -->
<!-- Import Tournament Modal -->
<!-- Import Tournament Modal -->
<!-- Import Tournament Modal -->
<div id="importTournamentModal" class="modal">
    <div class="modal-content" style="max-width: 900px;">
        <div class="modal-header">
            <h3 class="modal-title">Importar Torneo Ya Jugado</h3>
            <button class="modal-close" onclick="closeImportTournamentModal()">â</button>
        </div>

        <div class="alert alert-info">
            <span>â¹ï¸</span>
            <div>
                Importa un torneo que ya se jugÃ³. Ingresa los resultados de fase de grupos y semifinales.
                Solo faltarÃ¡ registrar la final y el tercer lugar.
            </div>
        </div>

        <div class="form-group">
            <label class="form-label">Nombre del Torneo *</label>
            <input type="text" class="form-input" id="importTournamentName" placeholder="Ej: Copa Septiembre 2024">
        </div>

        <div class="form-group">
            <label class="form-label">Fecha del Torneo *</label>
            <input type="date" class="form-input" id="importTournamentDate">
        </div>

        <div class="form-group">
            <label class="form-label">Tipo de Torneo *</label>
            <select class="form-input" id="importTournamentType">
                <option value="cup">ð Copa Express (Peso 0.7x)</option>
                <option value="league">ð Liga Regular (Peso 1.0x)</option>
                <option value="special">â­ Campeonato Especial (Peso 1.5x)</option>
            </select>
        </div>

        <!-- GRUPOS -->
        <h4 style="margin: 2rem 0 1rem 0;">Fase de Grupos</h4>
        
        <!-- Grupo A -->
        <div style="background: var(--bg-light); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">
            <h5 style="margin-bottom: 1rem; color: var(--primary);">Grupo A (4 parejas)</h5>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                <div class="pair-card">
                    <div class="pair-header">Pareja 1</div>
                    <select class="form-input" id="importGA_P1_J1" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 1...</option>
                    </select>
                    <select class="form-input" style="margin-top: 0.5rem;" id="importGA_P1_J2" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 2...</option>
                    </select>
                </div>

                <div class="pair-card">
                    <div class="pair-header">Pareja 2</div>
                    <select class="form-input" id="importGA_P2_J1" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 1...</option>
                    </select>
                    <select class="form-input" style="margin-top: 0.5rem;" id="importGA_P2_J2" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 2...</option>
                    </select>
                </div>

                <div class="pair-card">
                    <div class="pair-header">Pareja 3</div>
                    <select class="form-input" id="importGA_P3_J1" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 1...</option>
                    </select>
                    <select class="form-input" style="margin-top: 0.5rem;" id="importGA_P3_J2" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 2...</option>
                    </select>
                </div>

                <div class="pair-card">
                    <div class="pair-header">Pareja 4</div>
                    <select class="form-input" id="importGA_P4_J1" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 1...</option>
                    </select>
                    <select class="form-input" style="margin-top: 0.5rem;" id="importGA_P4_J2" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 2...</option>
                    </select>
                </div>
            </div>

            <h6 style="margin-bottom: 0.5rem;">Posiciones finales Grupo A:</h6>
            <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 0.5rem;">
                <div>
                    <label class="form-label" style="font-size: 0.85rem;">1Âº lugar</label>
                    <select class="form-input" id="importGA_Pos1">
                        <option value="1">Pareja 1</option>
                        <option value="2">Pareja 2</option>
                        <option value="3">Pareja 3</option>
                        <option value="4">Pareja 4</option>
                    </select>
                </div>
                <div>
                    <label class="form-label" style="font-size: 0.85rem;">2Âº lugar</label>
                    <select class="form-input" id="importGA_Pos2">
                        <option value="1">Pareja 1</option>
                        <option value="2" selected>Pareja 2</option>
                        <option value="3">Pareja 3</option>
                        <option value="4">Pareja 4</option>
                    </select>
                </div>
                <div>
                    <label class="form-label" style="font-size: 0.85rem;">3Âº lugar</label>
                    <select class="form-input" id="importGA_Pos3">
                        <option value="1">Pareja 1</option>
                        <option value="2">Pareja 2</option>
                        <option value="3" selected>Pareja 3</option>
                        <option value="4">Pareja 4</option>
                    </select>
                </div>
                <div>
                    <label class="form-label" style="font-size: 0.85rem;">4Âº lugar</label>
                    <select class="form-input" id="importGA_Pos4">
                        <option value="1">Pareja 1</option>
                        <option value="2">Pareja 2</option>
                        <option value="3">Pareja 3</option>
                        <option value="4" selected>Pareja 4</option>
                    </select>
                </div>
            </div>

            <div style="margin-top: 1rem;">
                <label class="form-label">EstadÃ­sticas del grupo (victorias por pareja):</label>
                <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 0.5rem;">
                    <div>
                        <input type="number" class="form-input" id="importGA_P1_Wins" min="0" max="3" placeholder="Victorias P1" style="text-align: center;">
                    </div>
                    <div>
                        <input type="number" class="form-input" id="importGA_P2_Wins" min="0" max="3" placeholder="Victorias P2" style="text-align: center;">
                    </div>
                    <div>
                        <input type="number" class="form-input" id="importGA_P3_Wins" min="0" max="3" placeholder="Victorias P3" style="text-align: center;">
                    </div>
                    <div>
                        <input type="number" class="form-input" id="importGA_P4_Wins" min="0" max="3" placeholder="Victorias P4" style="text-align: center;">
                    </div>
                </div>
            </div>
        </div>

        <!-- Grupo B -->
        <div style="background: var(--bg-light); padding: 1.5rem; border-radius: 10px; margin-bottom: 2rem;">
            <h5 style="margin-bottom: 1rem; color: var(--secondary);">Grupo B (4 parejas)</h5>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                <div class="pair-card">
                    <div class="pair-header">Pareja 1</div>
                    <select class="form-input" id="importGB_P1_J1" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 1...</option>
                    </select>
                    <select class="form-input" style="margin-top: 0.5rem;" id="importGB_P1_J2" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 2...</option>
                    </select>
                </div>

                <div class="pair-card">
                    <div class="pair-header">Pareja 2</div>
                    <select class="form-input" id="importGB_P2_J1" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 1...</option>
                    </select>
                    <select class="form-input" style="margin-top: 0.5rem;" id="importGB_P2_J2" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 2...</option>
                    </select>
                </div>

                <div class="pair-card">
                    <div class="pair-header">Pareja 3</div>
                    <select class="form-input" id="importGB_P3_J1" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 1...</option>
                    </select>
                    <select class="form-input" style="margin-top: 0.5rem;" id="importGB_P3_J2" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 2...</option>
                    </select>
                </div>

                <div class="pair-card">
                    <div class="pair-header">Pareja 4</div>
                    <select class="form-input" id="importGB_P4_J1" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 1...</option>
                    </select>
                    <select class="form-input" style="margin-top: 0.5rem;" id="importGB_P4_J2" onchange="updateImportPlayerSelections()">
                        <option value="">Jugador 2...</option>
                    </select>
                </div>
            </div>

            <h6 style="margin-bottom: 0.5rem;">Posiciones finales Grupo B:</h6>
            <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 0.5rem;">
                <div>
                    <label class="form-label" style="font-size: 0.85rem;">1Âº lugar</label>
                    <select class="form-input" id="importGB_Pos1">
                        <option value="1">Pareja 1</option>
                        <option value="2">Pareja 2</option>
                        <option value="3">Pareja 3</option>
                        <option value="4">Pareja 4</option>
                    </select>
                </div>
                <div>
                    <label class="form-label" style="font-size: 0.85rem;">2Âº lugar</label>
                    <select class="form-input" id="importGB_Pos2">
                        <option value="1">Pareja 1</option>
                        <option value="2" selected>Pareja 2</option>
                        <option value="3">Pareja 3</option>
                        <option value="4">Pareja 4</option>
                    </select>
                </div>
                <div>
                    <label class="form-label" style="font-size: 0.85rem;">3Âº lugar</label>
                    <select class="form-input" id="importGB_Pos3">
                        <option value="1">Pareja 1</option>
                        <option value="2">Pareja 2</option>
                        <option value="3" selected>Pareja 3</option>
                        <option value="4">Pareja 4</option>
                    </select>
                </div>
                <div>
                    <label class="form-label" style="font-size: 0.85rem;">4Âº lugar</label>
                    <select class="form-input" id="importGB_Pos4">
                        <option value="1">Pareja 1</option>
                        <option value="2">Pareja 2</option>
                        <option value="3">Pareja 3</option>
                        <option value="4" selected>Pareja 4</option>
                    </select>
                </div>
            </div>

            <div style="margin-top: 1rem;">
                <label class="form-label">EstadÃ­sticas del grupo (victorias por pareja):</label>
                <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 0.5rem;">
                    <div>
                        <input type="number" class="form-input" id="importGB_P1_Wins" min="0" max="3" placeholder="Victorias P1" style="text-align: center;">
                    </div>
                    <div>
                        <input type="number" class="form-input" id="importGB_P2_Wins" min="0" max="3" placeholder="Victorias P2" style="text-align: center;">
                    </div>
                    <div>
                        <input type="number" class="form-input" id="importGB_P3_Wins" min="0" max="3" placeholder="Victorias P3" style="text-align: center;">
                    </div>
                    <div>
                        <input type="number" class="form-input" id="importGB_P4_Wins" min="0" max="3" placeholder="Victorias P4" style="text-align: center;">
                    </div>
                </div>
            </div>
        </div>

        <!-- SEMIFINALES -->
        <h4 style="margin: 2rem 0 1rem 0;">Resultados de Semifinales</h4>
        <p style="color: var(--text-light); margin-bottom: 1rem;">Los semifinalistas son los primeros 2 lugares de cada grupo</p>

        <div style="background: var(--bg-light); padding: 1.5rem; border-radius: 10px; margin-bottom: 1rem;">
            <h5 style="margin-bottom: 1rem; color: var(--primary);">Semifinal 1: 1Âº Grupo A vs 2Âº Grupo B</h5>
            <div style="display: grid; grid-template-columns: 1fr auto 1fr; gap: 1rem; align-items: center;">
                <div>
                    <label class="form-label">Sets 1Âº Grupo A</label>
                    <input type="number" class="form-input" id="importSF1Sets1" min="0" max="2" placeholder="0" style="text-align: center;">
                </div>
                <div style="font-size: 2rem; color: var(--text-light);">-</div>
                <div>
                    <label class="form-label">Sets 2Âº Grupo B</label>
                    <input type="number" class="form-input" id="importSF1Sets2" min="0" max="2" placeholder="0" style="text-align: center;">
                </div>
            </div>
        </div>

        <div style="background: var(--bg-light); padding: 1.5rem; border-radius: 10px; margin-bottom: 2rem;">
            <h5 style="margin-bottom: 1rem; color: var(--primary);">Semifinal 2: 1Âº Grupo B vs 2Âº Grupo A</h5>
            <div style="display: grid; grid-template-columns: 1fr auto 1fr; gap: 1rem; align-items: center;">
                <div>
                    <label class="form-label">Sets 1Âº Grupo B</label>
                    <input type="number" class="form-input" id="importSF2Sets1" min="0" max="2" placeholder="0" style="text-align: center;">
                </div>
                <div style="font-size: 2rem; color: var(--text-light);">-</div>
                <div>
                    <label class="form-label">Sets 2Âº Grupo A</label>
                    <input type="number" class="form-input" id="importSF2Sets2" min="0" max="2" placeholder="0" style="text-align: center;">
                </div>
            </div>
        </div>

        <div class="modal-actions">
            <button type="button" class="btn btn-cancel" onclick="closeImportTournamentModal()">Cancelar</button>
            <button type="button" class="btn btn-primary" onclick="finishImportTournament()">Importar Torneo</button>
        </div>
    </div>
</div>

        <div class="alert alert-info">
            <span>â¹ï¸</span>
            <div>
                Usa esta opciÃ³n para importar un torneo que ya se jugÃ³ la fase de grupos.
                Solo necesitarÃ¡s registrar la final y el tercer lugar.
            </div>
        </div>

        <div class="form-group">
            <label class="form-label">Nombre del Torneo *</label>
            <input type="text" class="form-input" id="importTournamentName" placeholder="Ej: Copa Septiembre 2024">
        </div>

        <div class="form-group">
            <label class="form-label">Fecha del Torneo *</label>
            <input type="date" class="form-input" id="importTournamentDate">
        </div>

        <div class="form-group">
            <label class="form-label">Tipo de Torneo *</label>
            <select class="form-input" id="importTournamentType">
                <option value="cup">ð Copa Express (Peso 0.7x)</option>
                <option value="league">ð Liga Regular (Peso 1.0x)</option>
                <option value="special">â­ Campeonato Especial (Peso 1.5x)</option>
            </select>
        </div>

        <h4 style="margin: 2rem 0 1rem 0;">Semifinalistas (4 parejas)</h4>
        <p style="color: var(--text-light); margin-bottom: 1rem;">Selecciona las 4 parejas que llegaron a semifinales:</p>

        <div id="importSemifinalistsPairs" style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 2rem;">
            <!-- Semifinal 1 -->
            <div class="pair-card">
                <div class="pair-header">Semifinal 1 - Pareja 1</div>
                <select class="form-input" id="importSF1P1" onchange="updateImportPlayerSelections()">
                    <option value="">Seleccionar jugador 1...</option>
                </select>
                <select class="form-input" style="margin-top: 0.5rem;" id="importSF1P2" onchange="updateImportPlayerSelections()">
                    <option value="">Seleccionar jugador 2...</option>
                </select>
            </div>

            <div class="pair-card">
                <div class="pair-header">Semifinal 1 - Pareja 2</div>
                <select class="form-input" id="importSF1P3" onchange="updateImportPlayerSelections()">
                    <option value="">Seleccionar jugador 1...</option>
                </select>
                <select class="form-input" style="margin-top: 0.5rem;" id="importSF1P4" onchange="updateImportPlayerSelections()">
                    <option value="">Seleccionar jugador 2...</option>
                </select>
            </div>

            <!-- Semifinal 2 -->
            <div class="pair-card">
                <div class="pair-header">Semifinal 2 - Pareja 1</div>
                <select class="form-input" id="importSF2P1" onchange="updateImportPlayerSelections()">
                    <option value="">Seleccionar jugador 1...</option>
                </select>
                <select class="form-input" style="margin-top: 0.5rem;" id="importSF2P2" onchange="updateImportPlayerSelections()">
                    <option value="">Seleccionar jugador 2...</option>
                </select>
            </div>

            <div class="pair-card">
                <div class="pair-header">Semifinal 2 - Pareja 2</div>
                <select class="form-input" id="importSF2P3" onchange="updateImportPlayerSelections()">
                    <option value="">Seleccionar jugador 1...</option>
                </select>
                <select class="form-input" style="margin-top: 0.5rem;" id="importSF2P4" onchange="updateImportPlayerSelections()">
                    <option value="">Seleccionar jugador 2...</option>
                </select>
            </div>
        </div>

        <h4 style="margin: 2rem 0 1rem 0;">Resultados de Semifinales</h4>
        
        <div style="background: var(--bg-light); padding: 1.5rem; border-radius: 10px; margin-bottom: 1rem;">
            <h5 style="margin-bottom: 1rem; color: var(--primary);">Semifinal 1</h5>
            <div style="display: grid; grid-template-columns: 1fr auto 1fr; gap: 1rem; align-items: center;">
                <div>
                    <label class="form-label">Sets Pareja 1</label>
                    <input type="number" class="form-input" id="importSF1Sets1" min="0" max="2" placeholder="0" style="text-align: center;">
                </div>
                <div style="font-size: 2rem; color: var(--text-light);">-</div>
                <div>
                    <label class="form-label">Sets Pareja 2</label>
                    <input type="number" class="form-input" id="importSF1Sets2" min="0" max="2" placeholder="0" style="text-align: center;">
                </div>
            </div>
        </div>

        <div style="background: var(--bg-light); padding: 1.5rem; border-radius: 10px; margin-bottom: 2rem;">
            <h5 style="margin-bottom: 1rem; color: var(--primary);">Semifinal 2</h5>
            <div style="display: grid; grid-template-columns: 1fr auto 1fr; gap: 1rem; align-items: center;">
                <div>
                    <label class="form-label">Sets Pareja 1</label>
                    <input type="number" class="form-input" id="importSF2Sets1" min="0" max="2" placeholder="0" style="text-align: center;">
                </div>
                <div style="font-size: 2rem; color: var(--text-light);">-</div>
                <div>
                    <label class="form-label">Sets Pareja 2</label>
                    <input type="number" class="form-input" id="importSF2Sets2" min="0" max="2" placeholder="0" style="text-align: center;">
                </div>
            </div>
        </div>

        <div class="modal-actions">
            <button type="button" class="btn btn-cancel" onclick="closeImportTournamentModal()">Cancelar</button>
            <button type="button" class="btn btn-primary" onclick="finishImportTournament()">Importar Torneo</button>
        </div>
    </div>
</div>    
<div id="tournamentDetailsModal" class="modal">
        <div class="modal-content" style="max-width: 900px;">
            <div class="modal-header">
                <h3 class="modal-title" id="tournamentDetailsTitle">Detalles del Torneo</h3>
                <button class="modal-close" onclick="closeTournamentDetailsModal()">â</button>
            </div>
            <div id="tournamentDetailsContent"></div>
        </div>
    </div>

    <script>
        // ============================================
        // DATA STRUCTURE & INITIALIZATION
        // ============================================

        const STORAGE_KEY = 'padelLeagueData';
        const CURRENT_SEASON = '2025';

        function getDefaultData() {
            return {
                version: '2.1',
                currentSeason: CURRENT_SEASON,
                seasons: {
                    '2025': {
                        players: [
                            { id: 'p1', name: 'Puppo', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p2', name: 'Calush', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p3', name: 'Gilmar', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p4', name: 'David', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p5', name: 'AlmazÃ¡n', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p6', name: 'CalderÃ³n', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p7', name: 'MartÃ­n', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p8', name: 'Mark', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p9', name: 'Alfredo', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p10', name: 'Frank', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p11', name: 'Diego', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p12', name: 'JD', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p13', name: 'Jose', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p14', name: 'Joshua', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p15', name: 'Christian', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true },
                            { id: 'p16', name: 'Sebas', rankingPoints: 0, tournaments: [], totalWins: 0, totalLosses: 0, titles: 0, runnerUps: 0, active: true }
                        ],
                        tournaments: []
                    }
                }
            };
        }

        function loadData() {
            const stored = localStorage.getItem(STORAGE_KEY);
            if (stored) {
                try {
                    return JSON.parse(stored);
                } catch (e) {
                    console.error('Error parsing stored data:', e);
                    return getDefaultData();
                }
            }
            return getDefaultData();
        }

        function saveData(data) {
            try {
                localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
                return true;
            } catch (e) {
                console.error('Error saving data:', e);
                alert('Error al guardar datos. El almacenamiento puede estar lleno.');
                return false;
            }
        }

        let appData = loadData();

        // ============================================
        // NAVIGATION
        // ============================================

        function showSection(sectionId) {
            document.querySelectorAll('.section').forEach(section => {
                section.classList.remove('active');
            });

            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });

            const section = document.getElementById(sectionId);
            if (section) {
                section.classList.add('active');
            }

            const navItem = document.querySelector(`[data-section="${sectionId}"]`);
            if (navItem) {
                navItem.classList.add('active');
            }

            refreshCurrentSection(sectionId);
        }

        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', () => {
                const section = item.getAttribute('data-section');
                showSection(section);
            });
        });

        // ============================================
        // THEME TOGGLE
        // ============================================

        const themeToggle = document.getElementById('themeToggle');
        let isDarkMode = localStorage.getItem('darkMode') === 'true';

        function applyTheme() {
            if (isDarkMode) {
                document.body.classList.add('dark-mode');
                themeToggle.textContent = 'âï¸';
            } else {
                document.body.classList.remove('dark-mode');
                themeToggle.textContent = 'ð';
            }
        }

        themeToggle.addEventListener('click', () => {
            isDarkMode = !isDarkMode;
            localStorage.setItem('darkMode', isDarkMode);
            applyTheme();
        });

        applyTheme();

        // ============================================
        // LOADING OVERLAY
        // ============================================

        function showLoading(message = 'Procesando...') {
            const overlay = document.createElement('div');
            overlay.className = 'loading-overlay';
            overlay.id = 'loadingOverlay';
            overlay.innerHTML = `
                <div class="loading-content">
                    <div class="spinner"></div>
                    <div style="margin-top: 1rem; font-weight: 500;">${message}</div>
                </div>
            `;
            document.body.appendChild(overlay);
        }

        function hideLoading() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.remove();
            }
        }

        // ============================================
        // NOTIFICATIONS
        // ============================================

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = 'alert alert-' + type;
            notification.style.position = 'fixed';
            notification.style.top = '100px';
            notification.style.right = '20px';
            notification.style.zIndex = '10001';
            notification.style.minWidth = '300px';
            notification.style.animation = 'slideInRight 0.3s';
            
            const icon = type === 'success' ? 'â' : type === 'warning' ? 'â ï¸' : 'â¹ï¸';
            notification.innerHTML = '<span>' + icon + '</span><div>' + message + '</div>';
            
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.3s';
                setTimeout(() => {
                    if (notification.parentNode) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // ============================================
        // RENDER FUNCTIONS
        // ============================================

        function refreshCurrentSection(sectionId) {
            switch(sectionId) {
                case 'dashboard':
                    renderDashboard();
                    break;
                case 'players':
                    renderPlayersTable();
                    break;
                case 'tournament':
                    renderTournamentsList();
                    break;
                case 'ranking':
                    renderRankingTable();
                    break;
                case 'calendar':
                    populateCalendarTournamentSelect();
                    renderCalendar();
                    break;
                case 'standings':
                    populateStandingsTournamentSelect();
                    renderStandings();
                    break;
                case 'playoffs':
                    populatePlayoffsTournamentSelect();
                    renderPlayoffs();
                    break;
                case 'data':
                    updateDataDashboard();
                    break;
            }
        }

        function renderDashboard() {
            const season = appData.seasons[appData.currentSeason];
            
            document.getElementById('statPlayers').textContent = season.players.filter(p => p.active).length;
            document.getElementById('statTournaments').textContent = season.tournaments.filter(t => t.status === 'completed').length;
            
            let totalMatches = 0;
            season.tournaments.forEach(t => {
                if (t.matches) {
                    totalMatches += t.matches.filter(m => m.status === 'completed' || m.status === 'walkover').length;
                }
            });
            document.getElementById('statMatches').textContent = totalMatches;

            const sortedPlayers = [...season.players].sort((a, b) => b.rankingPoints - a.rankingPoints);
            document.getElementById('statLeader').textContent = sortedPlayers[0] && sortedPlayers[0].rankingPoints > 0 
                ? sortedPlayers[0].name 
                : '-';

            renderTopPlayers();
        }

        function renderTopPlayers() {
            const season = appData.seasons[appData.currentSeason];
            const sortedPlayers = [...season.players].sort((a, b) => b.rankingPoints - a.rankingPoints);
            const top5 = sortedPlayers.slice(0, 5);

            const tbody = document.getElementById('topPlayersTable');
            
            if (top5.length === 0 || top5[0].rankingPoints === 0) {
                tbody.innerHTML = '<tr><td colspan="5" style="text-align: center; padding: 2rem; color: var(--text-light);">No hay datos de ranking disponibles aÃºn</td></tr>';
                return;
            }

            let html = '';
            top5.forEach((player, index) => {
                const badge = index === 0 ? '<span class="badge badge-gold">ð</span>' :
                             index === 1 ? '<span class="badge badge-silver">ð¥</span>' :
                             index === 2 ? '<span class="badge badge-bronze">ð¥</span>' : '';
                
                html += `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${player.name} ${badge}</td>
                        <td><strong>${player.rankingPoints.toLocaleString()}</strong></td>
                        <td>${player.titles}</td>
                        <td>${player.totalWins}-${player.totalLosses}</td>
                    </tr>
                `;
            });

            tbody.innerHTML = html;
        }

        // ============================================
        // PLAYER MANAGEMENT
        // ============================================

        let currentEditingPlayerId = null;

        function openPlayerModal(playerId = null) {
            const modal = document.getElementById('playerModal');
            const modalTitle = document.getElementById('playerModalTitle');
            const playerName = document.getElementById('playerName');
            const submitBtn = document.getElementById('playerSubmitBtn');

            if (playerId) {
                const season = appData.seasons[appData.currentSeason];
                const player = season.players.find(p => p.id === playerId);
                
                if (player) {
                    currentEditingPlayerId = playerId;
                    modalTitle.textContent = 'Editar Jugador';
                    playerName.value = player.name;
                    submitBtn.textContent = 'Actualizar';
                }
            } else {
                currentEditingPlayerId = null;
                modalTitle.textContent = 'Agregar Jugador';
                playerName.value = '';
                submitBtn.textContent = 'Guardar';
            }

            document.getElementById('playerNameError').style.display = 'none';
            modal.classList.add('active');
        }

        function closePlayerModal() {
            const modal = document.getElementById('playerModal');
            modal.classList.remove('active');
            document.getElementById('playerForm').reset();
            currentEditingPlayerId = null;
        }

        function savePlayer(event) {
            event.preventDefault();
            
            const playerName = document.getElementById('playerName').value.trim();
            const errorDiv = document.getElementById('playerNameError');
            
            if (!playerName) {
                errorDiv.textContent = 'El nombre es obligatorio';
                errorDiv.style.display = 'block';
                return;
            }

            const season = appData.seasons[appData.currentSeason];

            const duplicatePlayer = season.players.find(p => 
                p.name.toLowerCase() === playerName.toLowerCase() && 
                p.id !== currentEditingPlayerId
            );

            if (duplicatePlayer) {
                errorDiv.textContent = 'Ya existe un jugador con este nombre';
                errorDiv.style.display = 'block';
                return;
            }

            if (currentEditingPlayerId) {
                const player = season.players.find(p => p.id === currentEditingPlayerId);
                if (player) {
                    player.name = playerName;
                    showNotification('Jugador actualizado correctamente', 'success');
                }
            } else {
                const newPlayer = {
                    id: 'p' + Date.now(),
                    name: playerName,
                    rankingPoints: 0,
                    tournaments: [],
                    totalWins: 0,
                    totalLosses: 0,
                    titles: 0,
                    runnerUps: 0,
                    active: true
                };

                season.players.push(newPlayer);
                showNotification('Jugador agregado correctamente', 'success');
            }

            saveData(appData);
            closePlayerModal();
            renderPlayersTable();
            renderDashboard();
        }

        function editPlayer(playerId) {
            openPlayerModal(playerId);
        }

        function deletePlayer(playerId) {
            const season = appData.seasons[appData.currentSeason];
            const player = season.players.find(p => p.id === playerId);
            
            if (!player) return;

            if (confirm('Â¿EstÃ¡s seguro de que deseas eliminar a ' + player.name + '?\n\nEsta acciÃ³n eliminarÃ¡ todos sus datos y no se puede deshacer.')) {
                season.players = season.players.filter(p => p.id !== playerId);
                saveData(appData);
                renderPlayersTable();
                renderDashboard();
                showNotification('Jugador eliminado correctamente', 'success');
            }
        }

        function togglePlayerStatus(playerId) {
            const season = appData.seasons[appData.currentSeason];
            const player = season.players.find(p => p.id === playerId);
            
            if (!player) return;

            player.active = !player.active;
            saveData(appData);
            renderPlayersTable();
            renderDashboard();
            
            const status = player.active ? 'activado' : 'desactivado';
            showNotification('Jugador ' + status + ' correctamente', 'success');
        }

        function renderPlayersTable() {
            const season = appData.seasons[appData.currentSeason];
            const tbody = document.getElementById('playersTable');
            const searchTerm = document.getElementById('playerSearch') ? document.getElementById('playerSearch').value.toLowerCase() : '';

            const filteredPlayers = season.players.filter(player => 
                player.name.toLowerCase().includes(searchTerm)
            );

            const sortedPlayers = [...filteredPlayers].sort((a, b) => b.rankingPoints - a.rankingPoints);

            if (sortedPlayers.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" style="text-align: center; padding: 2rem; color: var(--text-light);">No se encontraron jugadores</td></tr>';
                return;
            }

            let html = '';
            sortedPlayers.forEach(player => {
                const statusBadge = player.active 
                    ? '<span class="badge" style="background: #4CAF50; color: white;">Activo</span>'
                    : '<span class="badge" style="background: #9E9E9E; color: white;">Inactivo</span>';

                const toggleBtn = player.active
                    ? '<button class="action-btn action-btn-toggle" onclick="togglePlayerStatus(\'' + player.id + '\')">Desactivar</button>'
                    : '<button class="action-btn action-btn-toggle" onclick="togglePlayerStatus(\'' + player.id + '\')">Activar</button>';

                html += '<tr>';
                html += '<td><strong>' + player.name + '</strong></td>';
                html += '<td>' + player.rankingPoints.toLocaleString() + ' pts</td>';
                html += '<td>' + (player.totalWins + player.totalLosses) + '</td>';
                html += '<td>' + player.totalWins + '-' + player.totalLosses + '</td>';
                html += '<td>' + player.titles + '</td>';
                html += '<td>' + statusBadge + '</td>';
                html += '<td>';
                html += '<button class="action-btn action-btn-edit" onclick="editPlayer(\'' + player.id + '\')">âï¸ Editar</button>';
                html += toggleBtn;
                html += '<button class="action-btn action-btn-delete" onclick="deletePlayer(\'' + player.id + '\')">ðï¸ Eliminar</button>';
                html += '</td>';
                html += '</tr>';
            });

            tbody.innerHTML = html;
        }

        if (document.getElementById('playerSearch')) {
            document.getElementById('playerSearch').addEventListener('input', () => {
                renderPlayersTable();
            });
        }

        // ============================================
        // TOURNAMENT WIZARD
        // ============================================

        let wizardCurrentStep = 1;
        let wizardData = {
            name: '',
            date: '',
            type: '',
            weight: 1.0,
            rounds: 1,
            pairCount: 0,
            selectedPlayers: [],
            pairs: [],
            groups: [],
            playoffsEnabled: false,
            playoffsQualified: 0
        };

        function openTournamentWizard() {
            // Check if there's an active tournament
            const season = appData.seasons[appData.currentSeason];
            const activeTournament = season.tournaments.find(t => t.status === 'active');
            
            if (activeTournament) {
                if (!confirm(`Ya existe un torneo activo: "${activeTournament.name}"\n\nÂ¿Deseas crear un nuevo torneo de todos modos?`)) {
                    return;
                }
            }

            wizardCurrentStep = 1;
            wizardData = {
                name: '',
                date: '',
                type: '',
                weight: 1.0,
                rounds: 1,
                pairCount: 0,
                selectedPlayers: [],
                pairs: [],
                groups: [],
                playoffsEnabled: false,
                playoffsQualified: 0
            };

            const today = new Date().toISOString().split('T')[0];
            document.getElementById('tournamentDate').value = today;
            document.getElementById('roundsSelectionSection').style.display = 'none';
            document.getElementById('playoffsSelectionSection').style.display = 'none';
            document.getElementById('playoffsQualifiedSection').style.display = 'none';
            document.getElementById('includePlayoffs').checked = false;

            document.getElementById('tournamentWizard').classList.add('active');
            updateWizardStep(1);
        }

        function closeTournamentWizard() {
            document.getElementById('tournamentWizard').classList.remove('active');
        }

        function updateWizardStep(step) {
            wizardCurrentStep = step;

            document.querySelectorAll('.wizard-step').forEach((stepEl, index) => {
                const stepNum = index + 1;
                stepEl.classList.remove('active', 'completed');
                
                if (stepNum === step) {
                    stepEl.classList.add('active');
                } else if (stepNum < step) {
                    stepEl.classList.add('completed');
                }
            });

            document.querySelectorAll('.wizard-panel').forEach(panel => {
                panel.classList.remove('active');
            });
            document.getElementById('wizardStep' + step).classList.add('active');

            const prevBtn = document.getElementById('wizardPrevBtn');
            const nextBtn = document.getElementById('wizardNextBtn');
            const finishBtn = document.getElementById('wizardFinishBtn');

            prevBtn.style.display = step > 1 ? 'inline-flex' : 'none';
            nextBtn.style.display = step < 5 ? 'inline-flex' : 'none';
            finishBtn.style.display = step === 5 ? 'inline-flex' : 'none';

            if (step === 3) {
                // Update playoffs section visibility based on current state
                updatePlayoffsQualifiedSection();
            } else if (step === 4) {
                renderPlayerSelection();
            } else if (step === 5) {
                renderPairFormation();
            }
        }

        function nextWizardStep() {
            if (!validateWizardStep(wizardCurrentStep)) {
                return;
            }

            updateWizardStep(wizardCurrentStep + 1);
        }

        function previousWizardStep() {
            updateWizardStep(wizardCurrentStep - 1);
        }

        function validateWizardStep(step) {
            switch(step) {
                case 1:
                    const name = document.getElementById('tournamentName').value.trim();
                    const date = document.getElementById('tournamentDate').value;
                    
                    if (!name) {
                        alert('Por favor ingresa el nombre del torneo');
                        return false;
                    }
                    
                    // Check for duplicate tournament name
                    const season = appData.seasons[appData.currentSeason];
                    const duplicate = season.tournaments.find(t => 
                        t.name.toLowerCase() === name.toLowerCase()
                    );
                    
                    if (duplicate) {
                        if (!confirm(`Ya existe un torneo llamado "${name}".\n\nÂ¿Deseas crear otro torneo con el mismo nombre?`)) {
                            return false;
                        }
                    }
                    
                    if (!date) {
                        alert('Por favor selecciona la fecha de inicio');
                        return false;
                    }
                    
                    // Warn if date is in the past
                    const selectedDate = new Date(date);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    
                    if (selectedDate < today) {
                        if (!confirm('La fecha seleccionada estÃ¡ en el pasado.\n\nÂ¿Deseas continuar de todos modos?')) {
                            return false;
                        }
                    }
                    
                    wizardData.name = name;
                    wizardData.date = date;
                    return true;

                case 2:
                    if (!wizardData.type) {
                        alert('Por favor selecciona el tipo de torneo');
                        return false;
                    }
                    if (!wizardData.rounds) {
                        alert('Por favor selecciona el nÃºmero de vueltas');
                        return false;
                    }
                    // NO validar playoffsQualified aquÃ­ - eso es en el paso 3
                    return true;

                case 3:
                    if (!wizardData.pairCount) {
                        alert('Por favor selecciona el nÃºmero de parejas');
                        return false;
                    }
                    // AHORA SÃ validar playoffs si estÃ¡n habilitados
                    if (wizardData.playoffsEnabled && !wizardData.playoffsQualified) {
                        alert('Por favor selecciona cuÃ¡ntas parejas clasifican a playoffs');
                        return false;
                    }
                    return true;

                case 4:
                    const requiredPlayers = wizardData.pairCount * 2;
                    if (wizardData.selectedPlayers.length !== requiredPlayers) {
                        alert('Debes seleccionar exactamente ' + requiredPlayers + ' jugadores');
                        return false;
                    }
                    return true;

                default:
                    return true;
            }
        }

        function selectTournamentType(type) {
            document.querySelectorAll('#wizardStep2 .tournament-card').forEach(card => {
                card.classList.remove('selected');
            });

            event.target.closest('.tournament-card').classList.add('selected');

            wizardData.type = type;
            
            if (type === 'league') {
                wizardData.weight = 1.0;
            } else if (type === 'cup') {
                wizardData.weight = 0.7;
            } else if (type === 'special') {
                wizardData.weight = 1.5;
            }

            document.getElementById('roundsSelectionSection').style.display = 'block';
            document.getElementById('tournamentType').value = type;
            
            // Show playoffs section only for League and Special
            const playoffsSection = document.getElementById('playoffsSelectionSection');
            if (type === 'league' || type === 'special') {
                playoffsSection.style.display = 'block';
            } else {
                playoffsSection.style.display = 'none';
                document.getElementById('includePlayoffs').checked = false;
                document.getElementById('playoffsOptionsSection').style.display = 'none';
            }
            
            // Reset rounds selection
            document.querySelectorAll('#roundsSelectionSection .tournament-card').forEach(card => {
                card.classList.remove('selected');
            });
            wizardData.rounds = 0;
            wizardData.playoffsEnabled = false;
            wizardData.playoffsQualified = 0;
        }

        function selectRounds(rounds) {
            document.querySelectorAll('#roundsSelectionSection .tournament-card').forEach(card => {
                card.classList.remove('selected');
            });

            event.target.closest('.tournament-card').classList.add('selected');

            wizardData.rounds = rounds;
            document.getElementById('tournamentRounds').value = rounds;
        }

        function togglePlayoffsCheckbox() {
            const isChecked = document.getElementById('includePlayoffs').checked;
            wizardData.playoffsEnabled = isChecked;
            
            // If already in step 3 and pair count selected, show/hide options
            if (wizardCurrentStep === 3 && wizardData.pairCount > 0) {
                updatePlayoffsQualifiedSection();
            }
        }

        function updatePlayoffsQualifiedSection() {
            const section = document.getElementById('playoffsQualifiedSection');
            
            if (wizardData.playoffsEnabled && wizardData.pairCount > 0) {
                section.style.display = 'block';
                // Reset qualified selection when pair count changes
                wizardData.playoffsQualified = 0;
                document.getElementById('playoffsQualified').value = '';
                updatePlayoffsOptions();
            } else {
                section.style.display = 'none';
                wizardData.playoffsQualified = 0;
            }
        }

        function updatePlayoffsOptions() {
            const pairCount = wizardData.pairCount;
            if (!pairCount) return;

            const grid = document.getElementById('playoffsOptionsGrid');
            let html = '';

            // Determine available options based on pair count
            const options = getPlayoffsOptions(pairCount);
            
            options.forEach(option => {
                html += '<div class="tournament-card" onclick="selectPlayoffsQualified(' + option.qualified + ')">';
                html += '<h3>' + option.qualified + ' Parejas</h3>';
                html += '<p style="font-size: 0.85rem; color: var(--text-light);">' + option.description + '</p>';
                html += '</div>';
            });

            grid.innerHTML = html;
        }

        function getPlayoffsOptions(pairCount) {
            const options = [];

            if (pairCount === 4) {
                options.push({ qualified: 2, description: 'Final directa' });
                options.push({ qualified: 4, description: 'Semifinales + Final' });
            } else if (pairCount === 6) {
                options.push({ qualified: 2, description: 'Final directa' });
                options.push({ qualified: 4, description: 'Semifinales + Final' });
                options.push({ qualified: 6, description: 'Prelim + Semis + Final' });
            } else if (pairCount === 8) {
                options.push({ qualified: 2, description: 'Final directa' });
                options.push({ qualified: 4, description: 'Semifinales + Final' });
                options.push({ qualified: 8, description: 'Prelim + Semis + Final' });
            } else if (pairCount === 10) {
                options.push({ qualified: 2, description: 'Final directa' });
                options.push({ qualified: 4, description: 'Semifinales + Final' });
                options.push({ qualified: 8, description: 'Prelim + Semis + Final' });
            }

            return options;
        }

        function selectPlayoffsQualified(qualified) {
            document.querySelectorAll('#playoffsOptionsGrid .tournament-card').forEach(card => {
                card.classList.remove('selected');
            });

            event.target.closest('.tournament-card').classList.add('selected');

            wizardData.playoffsQualified = qualified;
            document.getElementById('playoffsQualified').value = qualified;
        }

        function selectPairCount(count) {
            document.querySelectorAll('#wizardStep3 .tournament-card').forEach(card => {
                card.classList.remove('selected');
            });

            event.target.closest('.tournament-card').classList.add('selected');

            wizardData.pairCount = count;
            document.getElementById('pairCount').value = count;
            
            // Show playoffs qualified section if playoffs are enabled
            updatePlayoffsQualifiedSection();
        }

        function renderPlayerSelection() {
            const season = appData.seasons[appData.currentSeason];
            const activePlayers = season.players.filter(p => p.active);
            const grid = document.getElementById('playerSelectionGrid');
            const requiredPlayers = wizardData.pairCount * 2;

            document.getElementById('requiredPlayerCount').textContent = requiredPlayers;
            document.getElementById('selectedPlayerCount').textContent = wizardData.selectedPlayers.length;

            let html = '';
            activePlayers.forEach(player => {
                const isSelected = wizardData.selectedPlayers.includes(player.id);
                const selectedClass = isSelected ? 'selected' : '';
                
                html += '<div class="player-checkbox ' + selectedClass + '" onclick="togglePlayerSelection(\'' + player.id + '\')">';
                html += '<input type="checkbox" ' + (isSelected ? 'checked' : '') + ' onclick="event.stopPropagation(); togglePlayerSelection(\'' + player.id + '\')">';
                html += '<span>' + player.name + '</span>';
                html += '</div>';
            });

            grid.innerHTML = html;
        }

        function togglePlayerSelection(playerId) {
            const requiredPlayers = wizardData.pairCount * 2;
            const index = wizardData.selectedPlayers.indexOf(playerId);

            if (index > -1) {
                wizardData.selectedPlayers.splice(index, 1);
            } else {
                if (wizardData.selectedPlayers.length < requiredPlayers) {
                    wizardData.selectedPlayers.push(playerId);
                } else {
                    alert('Ya has seleccionado el mÃ¡ximo de jugadores (' + requiredPlayers + ')');
                    return;
                }
            }

            renderPlayerSelection();
        }

        function selectAllPlayers() {
            const season = appData.seasons[appData.currentSeason];
            const activePlayers = season.players.filter(p => p.active);
            const requiredPlayers = wizardData.pairCount * 2;

            if (activePlayers.length < requiredPlayers) {
                alert('No hay suficientes jugadores activos. Necesitas ' + requiredPlayers + ' jugadores pero solo hay ' + activePlayers.length + ' activos.');
                return;
            }

            wizardData.selectedPlayers = activePlayers.slice(0, requiredPlayers).map(p => p.id);
            renderPlayerSelection();
            showNotification('Seleccionados ' + requiredPlayers + ' jugadores automÃ¡ticamente', 'success');
        }

        function renderPairFormation() {
            const season = appData.seasons[appData.currentSeason];
            const container = document.getElementById('pairsFormation');

            if (wizardData.pairs.length === 0) {
                for (let i = 0; i < wizardData.pairCount; i++) {
                    wizardData.pairs.push({
                        id: 'pair' + (i + 1),
                        name: 'Pareja ' + (i + 1),
                        player1: null,
                        player2: null
                    });
                }
            }

            let html = '';
            wizardData.pairs.forEach((pair, index) => {
                html += '<div class="pair-card">';
                html += '<div class="pair-header">Pareja ' + (index + 1) + '</div>';
                html += '<div class="pair-players">';
                
                html += '<select class="pair-player-select" onchange="updatePairPlayer(' + index + ', 1, this.value)">';
                html += '<option value="">Seleccionar Jugador 1...</option>';
                wizardData.selectedPlayers.forEach(playerId => {
                    const player = season.players.find(p => p.id === playerId);
                    const isUsed = wizardData.pairs.some((p, pIndex) => 
                        pIndex !== index && (p.player1 === playerId || p.player2 === playerId)
                    );
                    if (!isUsed || pair.player1 === playerId) {
                        html += '<option value="' + playerId + '" ' + (pair.player1 === playerId ? 'selected' : '') + '>' + player.name + '</option>';
                    }
                });
                html += '</select>';

                html += '<select class="pair-player-select" onchange="updatePairPlayer(' + index + ', 2, this.value)">';
                html += '<option value="">Seleccionar Jugador 2...</option>';
                wizardData.selectedPlayers.forEach(playerId => {
                    const player = season.players.find(p => p.id === playerId);
                    const isUsed = wizardData.pairs.some((p, pIndex) => 
                        pIndex !== index && (p.player1 === playerId || p.player2 === playerId)
                    );
                    if (!isUsed || pair.player2 === playerId) {
                        html += '<option value="' + playerId + '" ' + (pair.player2 === playerId ? 'selected' : '') + '>' + player.name + '</option>';
                    }
                });
                html += '</select>';

                html += '</div>';
                html += '</div>';
            });

            container.innerHTML = html;
        }

        function updatePairPlayer(pairIndex, playerNumber, playerId) {
            if (playerNumber === 1) {
                wizardData.pairs[pairIndex].player1 = playerId || null;
            } else {
                wizardData.pairs[pairIndex].player2 = playerId || null;
            }

            renderPairFormation();
        }

        function repeatLastTournamentPairs() {
            const season = appData.seasons[appData.currentSeason];
            
            if (!season.tournaments || season.tournaments.length === 0) {
                alert('No hay torneos anteriores para copiar las parejas');
                return;
            }

            const lastTournament = season.tournaments[season.tournaments.length - 1];
            
            if (!lastTournament.pairs || lastTournament.pairs.length === 0) {
                alert('El Ãºltimo torneo no tiene parejas definidas');
                return;
            }

            if (lastTournament.pairs.length !== wizardData.pairCount) {
                if (!confirm('El Ãºltimo torneo tenÃ­a ' + lastTournament.pairs.length + ' parejas, pero este torneo tiene ' + wizardData.pairCount + ' parejas.\n\nÂ¿Deseas copiar las parejas de todos modos?')) {
                    return;
                }
            }

            const lastPairs = lastTournament.pairs;
            let copiedCount = 0;

            for (let i = 0; i < Math.min(lastPairs.length, wizardData.pairs.length); i++) {
                const lastPair = lastPairs[i];
                const player1Id = lastPair.players[0];
                const player2Id = lastPair.players[1];

                if (wizardData.selectedPlayers.includes(player1Id) && 
                    wizardData.selectedPlayers.includes(player2Id)) {
                    
                    wizardData.pairs[i].player1 = player1Id;
                    wizardData.pairs[i].player2 = player2Id;
                    copiedCount++;
                }
            }

            renderPairFormation();
            showNotification('Se copiaron ' + copiedCount + ' parejas del Ãºltimo torneo', 'success');
        }

        function finishTournamentCreation() {
            const incompletePairs = wizardData.pairs.filter(p => !p.player1 || !p.player2);
            if (incompletePairs.length > 0) {
                alert('Por favor completa todas las parejas antes de continuar');
                return;
            }

            showLoading('Creando torneo...');

            setTimeout(() => {
                const season = appData.seasons[appData.currentSeason];

                const tournament = {
                    id: 't' + Date.now(),
                    name: wizardData.name,
                    date: wizardData.date,
                    type: wizardData.type,
                    weight: wizardData.weight,
                    rounds: wizardData.rounds,
                    status: 'active',
                    pairs: [],
                    matches: [],
                    penalties: [],
                    groups: [],
                    playoffs: null,
                    playoffsConfig: {
                        enabled: wizardData.playoffsEnabled,
                        qualified: wizardData.playoffsQualified
                    }
                };

                wizardData.pairs.forEach((pair, index) => {
                    const player1 = season.players.find(p => p.id === pair.player1);
                    const player2 = season.players.find(p => p.id === pair.player2);

                    tournament.pairs.push({
                        id: pair.id,
                        name: player1.name + ' - ' + player2.name,
                        players: [pair.player1, pair.player2],
                        points: 0,
                        played: 0,
                        won: 0,
                        lost: 0,
                        setsFor: 0,
                        setsAgainst: 0,
                        gamesFor: 0,
                        gamesAgainst: 0,
                        rankingAverage: (player1.rankingPoints + player2.rankingPoints) / 2
                    });
                });

                tournament.pairs.sort((a, b) => b.rankingAverage - a.rankingAverage);

                if (tournament.type === 'cup') {
                    tournament.groups = createGroupsWithBombos(tournament.pairs);
                }

                season.tournaments.push(tournament);
                saveData(appData);

                hideLoading();
                closeTournamentWizard();
                showSection('tournament');
                renderTournamentsList();
                renderDashboard();

                showNotification('Torneo creado exitosamente', 'success');
            }, 500);
        }

        function createGroupsWithBombos(pairs) {
            const numPairs = pairs.length;
            const numGroups = 2;
            const pairsPerGroup = numPairs / numGroups;

            const groups = [
                { id: 'groupA', name: 'Grupo A', pairs: [] },
                { id: 'groupB', name: 'Grupo B', pairs: [] }
            ];

            for (let i = 0; i < numPairs; i++) {
                const targetGroup = (Math.floor(i / 2) % 2 === 0) ? 0 : 1;
                groups[targetGroup].pairs.push(pairs[i].id);
            }

            return groups;
        }

        // ============================================
        // TOURNAMENT DETAILS MODAL (NEW)
        // ============================================

        function viewTournamentDetails(tournamentId) {
            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === tournamentId);
            
            if (!tournament) return;

            const modal = document.getElementById('tournamentDetailsModal');
            const title = document.getElementById('tournamentDetailsTitle');
            const content = document.getElementById('tournamentDetailsContent');

            title.textContent = tournament.name;

            const typeLabel = tournament.type === 'league' ? 'ð Liga Regular' :
                             tournament.type === 'cup' ? 'ð Copa Express' : 'â­ Campeonato Especial';

            const statusBadge = tournament.status === 'active' 
                ? '<span class="badge" style="background: #4CAF50; color: white;">Activo</span>'
                : tournament.status === 'completed'
                ? '<span class="badge" style="background: #2196F3; color: white;">Completado</span>'
                : '<span class="badge" style="background: #9E9E9E; color: white;">Pendiente</span>';

            const completedMatches = tournament.matches ? tournament.matches.filter(m => m.status === 'completed' || m.status === 'walkover').length : 0;
            const totalMatches = tournament.matches ? tournament.matches.length : 0;
            const progress = totalMatches > 0 ? Math.round((completedMatches / totalMatches) * 100) : 0;

            let html = '';

            html += '<div class="details-grid">';
            html += '<div class="detail-item">';
            html += '<div class="detail-label">Tipo</div>';
            html += '<div class="detail-value">' + typeLabel + '</div>';
            html += '</div>';
            html += '<div class="detail-item">';
            html += '<div class="detail-label">Estado</div>';
            html += '<div class="detail-value">' + statusBadge + '</div>';
            html += '</div>';
            html += '<div class="detail-item">';
            html += '<div class="detail-label">Fecha</div>';
            html += '<div class="detail-value">' + new Date(tournament.date).toLocaleDateString('es-ES') + '</div>';
            html += '</div>';
            html += '<div class="detail-item">';
            html += '<div class="detail-label">Peso</div>';
            html += '<div class="detail-value">' + tournament.weight + 'x</div>';
            html += '</div>';
            html += '<div class="detail-item">';
            html += '<div class="detail-label">Parejas</div>';
            html += '<div class="detail-value">' + tournament.pairs.length + '</div>';
            html += '</div>';
            html += '<div class="detail-item">';
            html += '<div class="detail-label">Progreso</div>';
            html += '<div class="detail-value">' + completedMatches + '/' + totalMatches + ' (' + progress + '%)</div>';
            html += '</div>';
            html += '</div>';

            html += '<div style="margin-top: 1.5rem;">';
            html += '<h4 style="margin-bottom: 1rem;">Parejas Participantes</h4>';
            html += '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 0.5rem;">';
            tournament.pairs.forEach((pair, index) => {
                html += '<div style="background: var(--bg-light); padding: 0.75rem; border-radius: 5px; border-left: 3px solid var(--primary);">';
                html += '<strong>' + (index + 1) + '.</strong> ' + pair.name;
                html += '</div>';
            });
            html += '</div>';
            html += '</div>';

            if (tournament.matches && tournament.matches.length > 0) {
                html += '<div style="margin-top: 1.5rem;">';
                html += '<h4 style="margin-bottom: 1rem;">EstadÃ­sticas del Torneo</h4>';
                
                // Calculate stats
                const walkovers = tournament.matches.filter(m => m.status === 'walkover').length;
                const avgSetsPerMatch = tournament.matches
                    .filter(m => m.result && m.result.sets)
                    .reduce((sum, m) => sum + m.result.sets.length, 0) / completedMatches || 0;

                html += '<div class="details-grid">';
                html += '<div class="detail-item">';
                html += '<div class="detail-label">Partidos Completos</div>';
                html += '<div class="detail-value">' + completedMatches + '</div>';
                html += '</div>';
                html += '<div class="detail-item">';
                html += '<div class="detail-label">Walkovers</div>';
                html += '<div class="detail-value">' + walkovers + '</div>';
                html += '</div>';
                html += '<div class="detail-item">';
                html += '<div class="detail-label">Sets Promedio</div>';
                html += '<div class="detail-value">' + avgSetsPerMatch.toFixed(1) + '</div>';
                html += '</div>';
                html += '</div>';
                html += '</div>';
            }

            html += '<div style="margin-top: 1.5rem; display: flex; gap: 1rem; flex-wrap: wrap;">';
            html += '<button class="btn btn-primary" onclick="showSection(\'calendar\'); document.getElementById(\'calendarTournamentSelect\').value=\'' + tournamentId + '\'; renderCalendar(); closeTournamentDetailsModal();">ð Ver Calendario</button>';
            html += '<button class="btn btn-primary" onclick="showSection(\'standings\'); document.getElementById(\'standingsTournamentSelect\').value=\'' + tournamentId + '\'; renderStandings(); closeTournamentDetailsModal();">ð Ver Posiciones</button>';
            if (tournament.type === 'cup' || tournament.playoffs) {
                html += '<button class="btn btn-primary" onclick="showSection(\'playoffs\'); document.getElementById(\'playoffsTournamentSelect\').value=\'' + tournamentId + '\'; renderPlayoffs(); closeTournamentDetailsModal();">ð¥ Ver Playoffs</button>';
            }
            html += '</div>';

            content.innerHTML = html;
            modal.classList.add('active');
        }

        function closeTournamentDetailsModal() {
            document.getElementById('tournamentDetailsModal').classList.remove('active');
        }

        // ============================================
        // TOURNAMENTS LIST
        // ============================================

        function renderTournamentsList() {
            const season = appData.seasons[appData.currentSeason];
            const container = document.getElementById('tournamentsList');

            if (!season.tournaments || season.tournaments.length === 0) {
                container.innerHTML = '<p style="color: var(--text-light); text-align: center; padding: 2rem;">No hay torneos creados aÃºn</p>';
                return;
            }

            let html = '';
            season.tournaments.forEach(tournament => {
                const statusBadge = tournament.status === 'active' 
                    ? '<span class="badge" style="background: #4CAF50; color: white;">Activo</span>'
                    : tournament.status === 'completed'
                    ? '<span class="badge" style="background: #2196F3; color: white;">Completado</span>'
                    : '<span class="badge" style="background: #9E9E9E; color: white;">Pendiente</span>';

                const typeLabel = tournament.type === 'league' ? 'ð Liga Regular' :
                                 tournament.type === 'cup' ? 'ð Copa Express' : 'â­ Campeonato Especial';

                html += '<div class="card" style="margin-bottom: 1rem;">';
                html += '<div style="display: flex; justify-content: space-between; align-items: start; flex-wrap: wrap; gap: 1rem;">';
                html += '<div>';
                html += '<h3 style="margin-bottom: 0.5rem;">' + tournament.name + ' ' + statusBadge + '</h3>';
                html += '<p style="color: var(--text-light); margin: 0.25rem 0;">' + typeLabel + ' | Peso: ' + tournament.weight + 'x | Fecha: ' + new Date(tournament.date).toLocaleDateString('es-ES') + '</p>';
                html += '<p style="color: var(--text-light); margin: 0.25rem 0;">' + tournament.pairs.length + ' parejas participantes</p>';
                
                if (tournament.matches && tournament.matches.length > 0) {
                    const completedMatches = tournament.matches.filter(m => m.status === 'completed' || m.status === 'walkover').length;
                    const totalMatches = tournament.matches.length;
                    html += '<p style="color: var(--text-light); margin: 0.25rem 0;">Partidos: ' + completedMatches + '/' + totalMatches + ' completados</p>';
                }
                
                html += '</div>';
                html += '<div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">';
                html += '<button class="btn btn-primary" onclick="viewTournamentDetails(\'' + tournament.id + '\')">ðï¸ Ver Detalles</button>';
                if (tournament.status === 'active') {
                    html += '<button class="btn btn-secondary" onclick="completeTournamentDemo(\'' + tournament.id + '\')">ð² Completar DEMO</button>';
                }
                html += '<button class="btn btn-danger" onclick="deleteTournament(\'' + tournament.id + '\')">ðï¸ Borrar</button>';
                html += '</div>';
                html += '</div>';
                html += '</div>';
            });

            container.innerHTML = html;
        }

        function deleteTournament(tournamentId) {
            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === tournamentId);
            
            if (!tournament) return;

            if (!confirm('Â¿EstÃ¡s seguro de que deseas BORRAR el torneo "' + tournament.name + '"?\n\nEsta acciÃ³n eliminarÃ¡:\n- El torneo y todos sus partidos\n- Las estadÃ­sticas asociadas\n- Los puntos de ranking\n\nNO se puede deshacer.')) {
                return;
            }

            tournament.pairs.forEach(pair => {
                pair.players.forEach(playerId => {
                    const player = season.players.find(p => p.id === playerId);
                    if (player) {
                        player.totalWins -= pair.won || 0;
                        player.totalLosses -= pair.lost || 0;
                        if (player.totalWins < 0) player.totalWins = 0;
                        if (player.totalLosses < 0) player.totalLosses = 0;
                        
                        if (pair.finalPosition === 1) {
                            player.titles -= 1;
                            if (player.titles < 0) player.titles = 0;
                        } else if (pair.finalPosition === 2) {
                            player.runnerUps -= 1;
                            if (player.runnerUps < 0) player.runnerUps = 0;
                        }
                        
                        if (player.tournaments) {
                            player.tournaments = player.tournaments.filter(t => t.tournamentId !== tournamentId);
                        }
                    }
                });
            });

            season.tournaments = season.tournaments.filter(t => t.id !== tournamentId);

            season.players.forEach(player => {
                const ranking = calculatePlayerRanking(player.id);
                player.rankingPoints = ranking.totalPoints;
                player.rankingBreakdown = ranking.breakdown;
            });

            saveData(appData);
            renderTournamentsList();
            renderDashboard();
            renderRankingTable();
            populateCalendarTournamentSelect();
            populateStandingsTournamentSelect();
            populatePlayoffsTournamentSelect();

            showNotification('Torneo eliminado correctamente', 'success');
        }

        function completeTournamentDemo(tournamentId) {
            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === tournamentId);
            
            if (!tournament) return;

            if (!confirm('Esta funciÃ³n DEMO completarÃ¡ el torneo "' + tournament.name + '" con resultados simulados.\n\nÂ¿Continuar?')) {
                return;
            }

            showLoading('Simulando partidos...');

            setTimeout(() => {
                if (!tournament.matches || tournament.matches.length === 0) {
                    if (tournament.type === 'cup') {
                        generateCupFixture(tournament);
                    } else {
                        generateLeagueFixture(tournament);
                    }
                }

                tournament.matches.forEach(match => {
                    if (match.status !== 'pending') return;

                    const pair1 = tournament.pairs.find(p => p.id === match.pair1);
                    const pair2 = tournament.pairs.find(p => p.id === match.pair2);

                    if (!pair1 || !pair2) return;

                    const set1_1 = Math.random() > 0.5 ? 6 : Math.floor(Math.random() * 6);
                    const set1_2 = set1_1 === 6 ? Math.floor(Math.random() * 5) : 6;
                    
                    const set2_1 = Math.random() > 0.5 ? 6 : Math.floor(Math.random() * 6);
                    const set2_2 = set2_1 === 6 ? Math.floor(Math.random() * 5) : 6;

                    let setsTeam1 = 0;
                    let setsTeam2 = 0;

                    if (set1_1 > set1_2) setsTeam1++; else setsTeam2++;
                    if (set2_1 > set2_2) setsTeam1++; else setsTeam2++;

                    const winner = setsTeam1 > setsTeam2 ? match.pair1 : match.pair2;
                    const loser = winner === match.pair1 ? match.pair2 : match.pair1;

                    match.status = 'completed';
                    match.winner = winner;
                    match.result = {
                        winner: winner,
                        loser: loser,
                        sets1: setsTeam1,
                        sets2: setsTeam2,
                        games1: set1_1 + set2_1,
                        games2: set1_2 + set2_2,
                        sets: [
                            { team1: set1_1, team2: set1_2 },
                            { team1: set2_1, team2: set2_2 }
                        ]
                    };

                    pair1.played += 1;
                    pair2.played += 1;

                    if (winner === match.pair1) {
                        pair1.won += 1;
                        pair1.points += 3;
                        pair2.lost += 1;
                    } else {
                        pair2.won += 1;
                        pair2.points += 3;
                        pair1.lost += 1;
                    }

                    pair1.setsFor += setsTeam1;
                    pair1.setsAgainst += setsTeam2;
                    pair1.gamesFor += set1_1 + set2_1;
                    pair1.gamesAgainst += set1_2 + set2_2;

                    pair2.setsFor += setsTeam2;
                    pair2.setsAgainst += setsTeam1;
                    pair2.gamesFor += set1_2 + set2_2;
                    pair2.gamesAgainst += set1_1 + set2_1;
                });

                const sortedPairs = sortStandings(tournament.pairs);
                sortedPairs.forEach((pair, index) => {
                    pair.finalPosition = index + 1;
                });

                tournament.pairs.forEach(pair => {
                    pair.players.forEach(playerId => {
                        const player = season.players.find(p => p.id === playerId);
                        if (player) {
                            player.totalWins += pair.won;
                            player.totalLosses += pair.lost;
                            
                            if (pair.finalPosition === 1) {
                                player.titles += 1;
                            } else if (pair.finalPosition === 2) {
                                player.runnerUps += 1;
                            }

                            if (!player.tournaments) player.tournaments = [];
                            player.tournaments.push({
                                tournamentId: tournament.id,
                                tournamentName: tournament.name,
                                position: pair.finalPosition,
                                date: tournament.date
                            });
                        }
                    });
                });

                const championPair = sortedPairs[0];
                if (championPair) {
                    const mvpPlayerId = championPair.players[Math.floor(Math.random() * championPair.players.length)];
                    if (!tournament.awards) tournament.awards = {};
                    tournament.awards.mvp = mvpPlayerId;
                }

                tournament.status = 'completed';

                saveData(appData);
                recalculateAllRankings();
                
                hideLoading();
                renderTournamentsList();
                renderStandings();

                showNotification('Torneo completado (DEMO) - Rankings actualizados', 'success');
            }, 1000);
        }

        // ============================================
        // FIXTURE GENERATION
        // ============================================

        function generateFixture() {
            const select = document.getElementById('calendarTournamentSelect');
            const tournamentId = select.value;
            
            if (!tournamentId) {
                alert('Por favor selecciona un torneo primero');
                return;
            }

            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === tournamentId);
            
            if (!tournament) return;

            if (tournament.matches && tournament.matches.length > 0) {
                if (!confirm('Este torneo ya tiene partidos generados. Â¿Regenerar el fixture? Esto eliminarÃ¡ los resultados existentes.')) {
                    return;
                }
            }

            showLoading('Generando fixture...');

            setTimeout(() => {
                tournament.matches = [];

                if (tournament.type === 'cup') {
                    generateCupFixture(tournament);
                } else {
                    generateLeagueFixture(tournament);
                }

                saveData(appData);
                hideLoading();
                renderCalendar();
                showNotification('Fixture generado correctamente', 'success');
            }, 500);
        }

        function generateLeagueFixture(tournament) {
            const pairs = tournament.pairs;
            const numPairs = pairs.length;

            const needsBye = numPairs % 2 !== 0;
            const totalPairs = needsBye ? numPairs + 1 : numPairs;
            const totalRounds = totalPairs - 1;
            const matchesPerRound = totalPairs / 2;

            let pairIds = pairs.map(p => p.id);
            if (needsBye) {
                pairIds.push('BYE');
            }

            let matchId = 1;

            for (let round = 1; round <= totalRounds; round++) {
                for (let i = 0; i < matchesPerRound; i++) {
                    const home = pairIds[i];
                    const away = pairIds[totalPairs - 1 - i];

                    if (home === 'BYE' || away === 'BYE') continue;

                    const pair1 = pairs.find(p => p.id === home);
                    const pair2 = pairs.find(p => p.id === away);

                    const match = {
                        id: 'm' + matchId,
                        round: round,
                        pair1: pair1.id,
                        pair2: pair2.id,
                        pair1Players: pair1.players,
                        pair2Players: pair2.players,
                        status: 'pending',
                        result: null,
                        type: 'regular'
                    };

                    tournament.matches.push(match);
                    matchId++;
                }

                const fixed = pairIds[0];
                const rotated = pairIds.slice(1);
                rotated.unshift(rotated.pop());
                pairIds = [fixed, ...rotated];
            }

            if (tournament.rounds === 2) {
                const firstRoundMatches = [...tournament.matches];
                const totalFirstRoundRounds = totalRounds;

                firstRoundMatches.forEach(match => {
                    const reverseMatch = {
                        id: 'm' + matchId,
                        round: match.round + totalFirstRoundRounds,
                        pair1: match.pair2,
                        pair2: match.pair1,
                        pair1Players: match.pair2Players,
                        pair2Players: match.pair1Players,
                        status: 'pending',
                        result: null,
                        type: 'regular'
                    };
                    
                    tournament.matches.push(reverseMatch);
                    matchId++;
                });
            }
        }

        function generateCupFixture(tournament) {
            if (!tournament.groups || tournament.groups.length === 0) {
                alert('Error: El torneo no tiene grupos definidos');
                return;
            }

            let matchId = 1;
            const allPairs = tournament.pairs;

            tournament.groups.forEach(group => {
                const groupPairs = group.pairs.map(pairId => 
                    allPairs.find(p => p.id === pairId)
                ).filter(p => p);

                const numPairs = groupPairs.length;
                const needsBye = numPairs % 2 !== 0;
                const totalPairs = needsBye ? numPairs + 1 : numPairs;
                const totalRounds = totalPairs - 1;
                const matchesPerRound = totalPairs / 2;

                let pairIds = groupPairs.map(p => p.id);
                if (needsBye) pairIds.push('BYE');

                for (let round = 1; round <= totalRounds; round++) {
                    for (let i = 0; i < matchesPerRound; i++) {
                        const home = pairIds[i];
                        const away = pairIds[totalPairs - 1 - i];

                        if (home === 'BYE' || away === 'BYE') continue;

                        const pair1 = groupPairs.find(p => p.id === home);
                        const pair2 = groupPairs.find(p => p.id === away);

                        const match = {
                            id: 'm' + matchId,
                            round: round,
                            groupId: group.id,
                            groupName: group.name,
                            pair1: pair1.id,
                            pair2: pair2.id,
                            pair1Players: pair1.players,
                            pair2Players: pair2.players,
                            status: 'pending',
                            result: null,
                            type: 'group_stage'
                        };

                        tournament.matches.push(match);
                        matchId++;
                    }

                    const fixed = pairIds[0];
                    const rotated = pairIds.slice(1);
                    rotated.unshift(rotated.pop());
                    pairIds = [fixed, ...rotated];
                }

                if (tournament.rounds === 2) {
                    const groupMatches = tournament.matches.filter(m => m.groupId === group.id);
                    const totalFirstRounds = totalRounds;

                    groupMatches.forEach(match => {
                        const reverseMatch = {
                            id: 'm' + matchId,
                            round: match.round + totalFirstRounds,
                            groupId: group.id,
                            groupName: group.name,
                            pair1: match.pair2,
                            pair2: match.pair1,
                            pair1Players: match.pair2Players,
                            pair2Players: match.pair1Players,
                            status: 'pending',
                            result: null,
                            type: 'group_stage'
                        };
                        
                        tournament.matches.push(reverseMatch);
                        matchId++;
                    });
                }
            });
        }

        // ============================================
        // CALENDAR RENDERING
        // ============================================

        function populateCalendarTournamentSelect() {
            const season = appData.seasons[appData.currentSeason];
            const select = document.getElementById('calendarTournamentSelect');
            
            let html = '<option value="">Seleccionar torneo...</option>';
            season.tournaments.forEach(tournament => {
                html += '<option value="' + tournament.id + '">' + tournament.name + '</option>';
            });
            
            select.innerHTML = html;
        }

        function renderCalendar() {
            const select = document.getElementById('calendarTournamentSelect');
            const tournamentId = select.value;
            const container = document.getElementById('calendarContent');

            if (!tournamentId) {
                container.innerHTML = '<p style="color: var(--text-light); text-align: center; padding: 2rem;">Selecciona un torneo para ver el calendario</p>';
                return;
            }

            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === tournamentId);
            
            if (!tournament) return;

            if (!tournament.matches || tournament.matches.length === 0) {
                container.innerHTML = '<div class="alert alert-warning">Este torneo no tiene partidos. Usa el botÃ³n "â¡ Generar Fixture".</div>';
                return;
            }

            let html = '';

            if (tournament.type === 'cup' && tournament.groups && tournament.groups.length > 0) {
                html += '<div class="card" style="margin-bottom: 1.5rem; background: var(--bg-light);">';
                html += '<h3 style="margin-bottom: 1rem;">ð² Grupos (por ranking)</h3>';
                html += '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">';
                
                tournament.groups.forEach(group => {
                    html += '<div style="background: var(--bg-white); padding: 1rem; border-radius: 5px; border: 2px solid var(--primary);">';
                    html += '<h4 style="color: var(--primary); margin-bottom: 0.5rem;">' + group.name + '</h4>';
                    
                    group.pairs.forEach(pairId => {
                        const pair = tournament.pairs.find(p => p.id === pairId);
                        if (pair) {
                            html += '<div style="padding: 0.25rem 0; font-size: 0.9rem;">â¢ ' + pair.name + '</div>';
                        }
                    });
                    
                    html += '</div>';
                });
                
                html += '</div>';
                html += '</div>';

                tournament.groups.forEach(group => {
                    const groupMatches = tournament.matches.filter(m => m.groupId === group.id);
                    
                    if (groupMatches.length === 0) return;

                    const completed = groupMatches.filter(m => m.status === 'completed' || m.status === 'walkover').length;
                    const total = groupMatches.length;

                    html += '<div class="group-section">';
                    html += '<div class="group-header">';
                    html += '<div><strong>ð ' + group.name + '</strong></div>';
                    html += '<div class="week-progress">' + completed + ' / ' + total + ' completados</div>';
                    html += '</div>';

                    const matchesByRound = {};
                    groupMatches.forEach(match => {
                        const roundNum = match.round || 1;
                        if (!matchesByRound[roundNum]) {
                            matchesByRound[roundNum] = [];
                        }
                        matchesByRound[roundNum].push(match);
                    });

                    const rounds = Object.keys(matchesByRound).sort((a, b) => parseInt(a) - parseInt(b));
                    rounds.forEach(round => {
                        html += '<div style="margin-left: 1rem; margin-bottom: 1rem;">';
                        html += '<h4 style="color: var(--text-light); margin-bottom: 0.5rem; font-size: 0.95rem;">Ronda ' + round + '</h4>';
                        matchesByRound[round].forEach(match => {
                            html += renderMatchCard(match, tournament);
                        });
                        html += '</div>';
                    });

                    html += '</div>';
                });
            } else {
                const matchesByRound = {};
                tournament.matches.forEach(match => {
                    const roundNum = match.round || match.week || 1;
                    if (!matchesByRound[roundNum]) {
                        matchesByRound[roundNum] = [];
                    }
                    matchesByRound[roundNum].push(match);
                });

                const rounds = Object.keys(matchesByRound).sort((a, b) => parseInt(a) - parseInt(b));

                rounds.forEach(round => {
                    const roundMatches = matchesByRound[round];
                    const completed = roundMatches.filter(m => m.status === 'completed' || m.status === 'walkover').length;
                    const total = roundMatches.length;

                    html += '<div class="week-section">';
                    html += '<div class="week-header">';
                    html += '<div><strong>Ronda ' + round + '</strong></div>';
                    html += '<div class="week-progress">' + completed + ' / ' + total + ' completados</div>';
                    html += '</div>';

                    roundMatches.forEach(match => {
                        html += renderMatchCard(match, tournament);
                    });

                    html += '</div>';
                });
            }

            container.innerHTML = html;
        }

        function renderMatchCard(match, tournament) {
            const pair1 = tournament.pairs.find(p => p.id === match.pair1);
            const pair2 = tournament.pairs.find(p => p.id === match.pair2);

            if (!pair1 || !pair2) return '';

            const statusClass = match.status === 'completed' ? 'completed' : 
                               match.status === 'walkover' ? 'walkover' : 'pending';

            const statusBadge = match.status === 'completed' ? '<span class="badge" style="background: #4CAF50; color: white;">â Jugado</span>' :
                               match.status === 'walkover' ? '<span class="badge" style="background: #FF9800; color: white;">W.O.</span>' :
                               '<span class="badge" style="background: #9E9E9E; color: white;">Pendiente</span>';

            let html = '<div class="match-card ' + statusClass + '">';
            html += '<div class="match-header">';
            html += '<div>';
            
            if (tournament.type === 'cup' && match.groupName) {
                html += '<span class="badge" style="background: var(--primary); color: white; margin-right: 0.5rem;">' + match.groupName + '</span>';
            }
            
            html += statusBadge;
            html += '</div>';
            
            if (match.status === 'pending' && tournament.status === 'active') {
                html += '<button class="btn btn-primary" style="font-size: 0.9rem; padding: 0.5rem 1rem;" onclick="openMatchResultModal(\'' + tournament.id + '\', \'' + match.id + '\')">Registrar</button>';
            } else if (match.status === 'completed' && tournament.status === 'active') {
                html += '<button class="btn btn-outline" style="font-size: 0.9rem; padding: 0.5rem 1rem;" onclick="openEditMatchResultModal(\'' + tournament.id + '\', \'' + match.id + '\')">âï¸ Editar</button>';
            }
            
            html += '</div>';
            html += '<div class="match-teams">';

            const isPair1Winner = match.result && match.result.winner === match.pair1;
            html += '<div class="match-team ' + (isPair1Winner ? 'winner' : '') + '">';
            html += '<span><strong>' + pair1.name + '</strong></span>';
            if (match.result) {
                html += '<span class="match-score">' + (match.result.sets1 || '0') + '</span>';
            }
            html += '</div>';

            const isPair2Winner = match.result && match.result.winner === match.pair2;
            html += '<div class="match-team ' + (isPair2Winner ? 'winner' : '') + '">';
            html += '<span><strong>' + pair2.name + '</strong></span>';
            if (match.result) {
                html += '<span class="match-score">' + (match.result.sets2 || '0') + '</span>';
            }
            html += '</div>';

            html += '</div>';

            if (match.result && match.result.sets) {
                html += '<div style="margin-top: 0.5rem; color: var(--text-light); font-size: 0.9rem;">';
                html += 'Sets: ';
                match.result.sets.forEach((set, index) => {
                    if (index > 0) html += ', ';
                    html += set.team1 + '-' + set.team2;
                });
                html += '</div>';
            }

            if (match.status === 'walkover' && match.walkoverReason) {
                html += '<div style="margin-top: 0.5rem; color: var(--warning); font-size: 0.85rem;">';
                html += 'â ï¸ ' + getWalkoverReasonText(match.walkoverReason);
                html += '</div>';
            }

            html += '</div>';

            return html;
        }

        function getWalkoverReasonText(reason) {
            switch(reason) {
                case 'late_5_14': return 'Atraso 5-14 minutos';
                case 'late_15_plus': return 'Atraso 15+ minutos';
                case 'no_show': return 'No se presentÃ³';
                case 'injury': return 'LesiÃ³n';
                default: return reason;
            }
        }

        // ============================================
        // MATCH RESULT MODAL
        // ============================================

        let currentMatchId = null;
        let currentTournamentId = null;
        let isEditingMatch = false;

        function openMatchResultModal(tournamentId, matchId) {
            isEditingMatch = false;
            currentTournamentId = tournamentId;
            currentMatchId = matchId;

            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === tournamentId);
            const match = tournament.matches.find(m => m.id === matchId);

            if (!match || !tournament) return;

            const pair1 = tournament.pairs.find(p => p.id === match.pair1);
            const pair2 = tournament.pairs.find(p => p.id === match.pair2);

            const matchInfo = document.getElementById('matchInfo');
            matchInfo.innerHTML = '<div style="text-align: center; padding: 1rem; background: var(--bg-light); border-radius: 5px;"><strong>' + pair1.name + '</strong> vs <strong>' + pair2.name + '</strong></div>';

            const walkoverWinner = document.getElementById('walkoverWinner');
            walkoverWinner.innerHTML = '<option value="">Seleccionar...</option>';
            walkoverWinner.innerHTML += '<option value="' + pair1.id + '">' + pair1.name + '</option>';
            walkoverWinner.innerHTML += '<option value="' + pair2.id + '">' + pair2.name + '</option>';

            resetMatchResultForm();
            document.getElementById('matchResultModal').classList.add('active');
        }

        function openEditMatchResultModal(tournamentId, matchId) {
            isEditingMatch = true;
            currentTournamentId = tournamentId;
            currentMatchId = matchId;

            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === tournamentId);
            const match = tournament.matches.find(m => m.id === matchId);

            if (!match || !tournament || match.status === 'pending') return;

            const pair1 = tournament.pairs.find(p => p.id === match.pair1);
            const pair2 = tournament.pairs.find(p => p.id === match.pair2);

            const matchInfo = document.getElementById('matchInfo');
            matchInfo.innerHTML = '<div style="text-align: center; padding: 1rem; background: var(--bg-light); border-radius: 5px;">';
            matchInfo.innerHTML += '<div style="color: var(--warning); font-weight: bold; margin-bottom: 0.5rem;">âï¸ EDITANDO RESULTADO</div>';
            matchInfo.innerHTML += '<strong>' + pair1.name + '</strong> vs <strong>' + pair2.name + '</strong>';
            matchInfo.innerHTML += '</div>';

            const walkoverWinner = document.getElementById('walkoverWinner');
            walkoverWinner.innerHTML = '<option value="">Seleccionar...</option>';
            walkoverWinner.innerHTML += '<option value="' + pair1.id + '">' + pair1.name + '</option>';
            walkoverWinner.innerHTML += '<option value="' + pair2.id + '">' + pair2.name + '</option>';

            if (match.status === 'walkover' && match.result && match.result.isWalkover) {
                document.getElementById('isWalkover').checked = true;
                toggleWalkoverMode();
                
                walkoverWinner.value = match.result.winner;
                document.getElementById('walkoverReason').value = match.walkoverReason || '';
                
                if (match.walkoverReason === 'other' || !['late_5_14', 'late_15_plus', 'no_show', 'injury'].includes(match.walkoverReason)) {
                    document.getElementById('walkoverReason').value = 'other';
                    document.getElementById('customReason').value = match.walkoverReason;
                    toggleCustomReason();
                }
            } else if (match.result && match.result.sets) {
                document.getElementById('isWalkover').checked = false;
                toggleWalkoverMode();
                
                if (match.result.sets.length >= 1) {
                    document.getElementById('set1Team1').value = match.result.sets[0].team1;
                    document.getElementById('set1Team2').value = match.result.sets[0].team2;
                }
                if (match.result.sets.length >= 2) {
                    document.getElementById('set2Team1').value = match.result.sets[1].team1;
                    document.getElementById('set2Team2').value = match.result.sets[1].team2;
                }
                if (match.result.sets.length >= 3) {
                    document.getElementById('set3Team1').value = match.result.sets[2].team1;
                    document.getElementById('set3Team2').value = match.result.sets[2].team2;
                }
                
                if (match.result.isIncomplete) {
                    document.getElementById('isIncompleteMatch').checked = true;
                }
            }

            document.getElementById('matchResultModal').classList.add('active');
        }

        function resetMatchResultForm() {
            document.getElementById('isWalkover').checked = false;
            document.getElementById('isIncompleteMatch').checked = false;
            document.getElementById('set1Team1').value = '';
            document.getElementById('set1Team2').value = '';
            document.getElementById('set2Team1').value = '';
            document.getElementById('set2Team2').value = '';
            document.getElementById('set3Team1').value = '';
            document.getElementById('set3Team2').value = '';
            document.getElementById('walkoverReason').value = '';
            document.getElementById('customReason').value = '';
            document.getElementById('matchResultError').style.display = 'none';
            toggleWalkoverMode();
        }

      function closeMatchResultModal() {
    document.getElementById('matchResultModal').classList.remove('active');
    currentMatchId = null;
    currentTournamentId = null;
    isEditingMatch = false;
    // NUEVO: Limpiar la marca de playoff
    window.currentMatchIsPlayoff = false;
}

        function toggleWalkoverMode() {
            const isWalkover = document.getElementById('isWalkover').checked;
            const normalSection = document.getElementById('normalMatchSection');
            const walkoverSection = document.getElementById('walkoverSection');

            if (isWalkover) {
                normalSection.style.display = 'none';
                walkoverSection.style.display = 'block';
            } else {
                normalSection.style.display = 'block';
                walkoverSection.style.display = 'none';
            }
        }

        function toggleCustomReason() {
            const reason = document.getElementById('walkoverReason').value;
            const customGroup = document.getElementById('customReasonGroup');
            customGroup.style.display = reason === 'other' ? 'block' : 'none';
        }

        function validateTennisScore(games1, games2, isIncomplete) {
            games1 = parseInt(games1) || 0;
            games2 = parseInt(games2) || 0;

            if (isIncomplete) return true;
            if (games1 === 0 && games2 === 0) return true;

            const validEndings = [
                [6, 0], [6, 1], [6, 2], [6, 3], [6, 4],
                [0, 6], [1, 6], [2, 6], [3, 6], [4, 6],
                [7, 5], [5, 7],
                [7, 6], [6, 7]
            ];

            return validEndings.some(ending => 
                ending[0] === games1 && ending[1] === games2
            );
        }

        function saveMatchResult() {
            const isWalkover = document.getElementById('isWalkover').checked;
            const errorDiv = document.getElementById('matchResultError');
            errorDiv.style.display = 'none';

            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === currentTournamentId);
            const match = tournament.matches.find(m => m.id === currentMatchId);

            if (!match || !tournament) return;

            // If editing, revert previous stats first
            if (isEditingMatch && match.status !== 'pending') {
                revertMatchStats(tournament, match);
            }

            if (isWalkover) {
                const winnerId = document.getElementById('walkoverWinner').value;
                const reason = document.getElementById('walkoverReason').value;
                const customReason = document.getElementById('customReason').value;

                if (!winnerId || !reason) {
                    alert('Por favor completa todos los campos requeridos');
                    return;
                }

                const loserId = winnerId === match.pair1 ? match.pair2 : match.pair1;
                const loserPair = tournament.pairs.find(p => p.id === loserId);

                match.status = 'walkover';
                match.walkoverReason = reason === 'other' ? customReason : reason;
                match.result = {
                    winner: winnerId,
                    loser: loserId,
                    sets1: winnerId === match.pair1 ? 2 : 0,
                    sets2: winnerId === match.pair2 ? 2 : 0,
                    sets: [
                        { team1: winnerId === match.pair1 ? 6 : 0, team2: winnerId === match.pair2 ? 6 : 0 },
                        { team1: winnerId === match.pair1 ? 6 : 0, team2: winnerId === match.pair2 ? 6 : 0 }
                    ],
                    isWalkover: true
                };

                let penaltyPoints = 0;
                if (reason === 'late_5_14') {
                    penaltyPoints = -2;
                } else if (reason === 'late_15_plus' || reason === 'no_show') {
                    penaltyPoints = -3;
                }

                if (penaltyPoints !== 0) {
                    loserPair.points += penaltyPoints;
                    
                    if (!tournament.penalties) tournament.penalties = [];
                    tournament.penalties.push({
                        pairId: loserId,
                        playerId: null,
                        points: Math.abs(penaltyPoints),
                        reason: match.walkoverReason,
                        date: new Date().toISOString(),
                        matchId: match.id
                    });
                }

                const winnerPair = tournament.pairs.find(p => p.id === winnerId);
                winnerPair.played += 1;
                winnerPair.won += 1;
                winnerPair.points += 3;
                winnerPair.setsFor += 2;

                loserPair.played += 1;
                loserPair.lost += 1;
                loserPair.setsAgainst += 2;

            } else {
                const isIncomplete = document.getElementById('isIncompleteMatch').checked;
                const set1_1 = document.getElementById('set1Team1').value;
                const set1_2 = document.getElementById('set1Team2').value;
                const set2_1 = document.getElementById('set2Team1').value;
                const set2_2 = document.getElementById('set2Team2').value;
                const set3_1 = document.getElementById('set3Team1').value;
                const set3_2 = document.getElementById('set3Team2').value;

                if (!set1_1 || !set1_2 || !set2_1 || !set2_2) {
                    errorDiv.textContent = 'Los primeros dos sets son obligatorios';
                    errorDiv.style.display = 'block';
                    return;
                }

                if (!validateTennisScore(set1_1, set1_2, isIncomplete)) {
                    errorDiv.textContent = 'Set 1: Marcador invÃ¡lido de tenis';
                    errorDiv.style.display = 'block';
                    return;
                }

                if (!validateTennisScore(set2_1, set2_2, isIncomplete)) {
                    errorDiv.textContent = 'Set 2: Marcador invÃ¡lido de tenis';
                    errorDiv.style.display = 'block';
                    return;
                }

                if ((set3_1 || set3_2) && !validateTennisScore(set3_1, set3_2, isIncomplete)) {
                    errorDiv.textContent = 'Set 3: Marcador invÃ¡lido de tenis';
                    errorDiv.style.display = 'block';
                    return;
                }

                const sets = [
                    { team1: parseInt(set1_1), team2: parseInt(set1_2) },
                    { team1: parseInt(set2_1), team2: parseInt(set2_2) }
                ];

                if (set3_1 && set3_2) {
                    sets.push({ team1: parseInt(set3_1), team2: parseInt(set3_2) });
                }

                let setsTeam1 = 0;
                let setsTeam2 = 0;
                let gamesTeam1 = 0;
                let gamesTeam2 = 0;

                sets.forEach(set => {
                    if (set.team1 > set.team2) setsTeam1++;
                    else if (set.team2 > set.team1) setsTeam2++;
                    gamesTeam1 += set.team1;
                    gamesTeam2 += set.team2;
                });

                const winner = setsTeam1 > setsTeam2 ? match.pair1 : match.pair2;
                const loser = winner === match.pair1 ? match.pair2 : match.pair1;

                match.status = 'completed';
                match.winner = winner;
                match.result = {
                    winner: winner,
                    loser: loser,
                    sets1: setsTeam1,
                    sets2: setsTeam2,
                    games1: gamesTeam1,
                    games2: gamesTeam2,
                    sets: sets,
                    isIncomplete: isIncomplete
                };

                const pair1 = tournament.pairs.find(p => p.id === match.pair1);
                const pair2 = tournament.pairs.find(p => p.id === match.pair2);

                pair1.played += 1;
                pair2.played += 1;

                if (winner === match.pair1) {
                    pair1.won += 1;
                    pair1.points += 3;
                    pair2.lost += 1;
                } else {
                    pair2.won += 1;
                    pair2.points += 3;
                    pair1.lost += 1;
                }

                pair1.setsFor += setsTeam1;
                pair1.setsAgainst += setsTeam2;
                pair1.gamesFor += gamesTeam1;
                pair1.gamesAgainst += gamesTeam2;

                pair2.setsFor += setsTeam2;
                pair2.setsAgainst += setsTeam1;
                pair2.gamesFor += gamesTeam2;
                pair2.gamesAgainst += gamesTeam1;
            }

            saveData(appData);
            closeMatchResultModal();
            renderCalendar();
            renderStandings();
            
            const action = isEditingMatch ? 'actualizado' : 'registrado';
            showNotification('Resultado ' + action + ' correctamente', 'success');
        }

        function revertMatchStats(tournament, match) {
            if (!match.result) return;

            const pair1 = tournament.pairs.find(p => p.id === match.pair1);
            const pair2 = tournament.pairs.find(p => p.id === match.pair2);

            if (!pair1 || !pair2) return;

            pair1.played -= 1;
            pair2.played -= 1;

            if (match.result.winner === match.pair1) {
                pair1.won -= 1;
                pair1.points -= 3;
                pair2.lost -= 1;
            } else {
                pair2.won -= 1;
                pair2.points -= 3;
                pair1.lost -= 1;
            }

            if (match.result.sets) {
                let setsTeam1 = match.result.sets1 || 0;
                let setsTeam2 = match.result.sets2 || 0;
                let gamesTeam1 = match.result.games1 || 0;
                let gamesTeam2 = match.result.games2 || 0;

                pair1.setsFor -= setsTeam1;
                pair1.setsAgainst -= setsTeam2;
                pair1.gamesFor -= gamesTeam1;
                pair1.gamesAgainst -= gamesTeam2;

                pair2.setsFor -= setsTeam2;
                pair2.setsAgainst -= setsTeam1;
                pair2.gamesFor -= gamesTeam2;
                pair2.gamesAgainst -= gamesTeam1;
            }

            // Remove penalties if walkover
            if (match.status === 'walkover' && tournament.penalties) {
                tournament.penalties = tournament.penalties.filter(p => p.matchId !== match.id);
            }
        }

        // ============================================
        // STANDINGS
        // ============================================

        function populateStandingsTournamentSelect() {
            const season = appData.seasons[appData.currentSeason];
            const select = document.getElementById('standingsTournamentSelect');
            
            let html = '<option value="">Seleccionar torneo...</option>';
            season.tournaments.forEach(tournament => {
                html += '<option value="' + tournament.id + '">' + tournament.name + '</option>';
            });
            
            select.innerHTML = html;
        }

        function renderStandings() {
            const select = document.getElementById('standingsTournamentSelect');
            const tournamentId = select.value;
            const container = document.getElementById('standingsContent');

            if (!tournamentId) {
                container.innerHTML = '<p style="color: var(--text-light); text-align: center; padding: 2rem;">Selecciona un torneo</p>';
                return;
            }

            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === tournamentId);
            
            if (!tournament) return;

            if (!tournament.pairs || tournament.pairs.length === 0) {
                container.innerHTML = '<div class="alert alert-warning">Este torneo no tiene parejas</div>';
                return;
            }

            let html = '';

            if (tournament.type === 'cup' && tournament.groups && tournament.groups.length > 0) {
                html += '<div class="alert alert-info" style="margin-bottom: 1.5rem;">';
                html += '<span>â¹ï¸</span>';
                html += '<div><strong>Copa Express:</strong> Los primeros 2 de cada grupo clasifican a semifinales.</div>';
                html += '</div>';

                tournament.groups.forEach(group => {
                    const groupPairs = group.pairs.map(pairId => 
                        tournament.pairs.find(p => p.id === pairId)
                    ).filter(p => p);

                    const sortedPairs = sortStandings(groupPairs);

                    html += '<div class="card" style="margin-bottom: 1.5rem;">';
                    html += '<h3 style="margin-bottom: 1rem; color: var(--primary);">ð ' + group.name + '</h3>';
                    html += renderStandingsTable(sortedPairs, true);
                    html += '</div>';
                });
            } else {
                html += '<div class="alert alert-info" style="margin-bottom: 1.5rem;">';
                html += '<span>â¹ï¸</span>';
                html += '<div><strong>Liga Regular:</strong> Tabla de posiciones general.</div>';
                html += '</div>';

                const sortedPairs = sortStandings(tournament.pairs);
                html += '<div class="card">';
                html += renderStandingsTable(sortedPairs, false);
                html += '</div>';
            }

            container.innerHTML = html;
        }

        function sortStandings(pairs) {
            return [...pairs].sort((a, b) => {
                if (b.points !== a.points) return b.points - a.points;
                
                const setDiffA = a.setsFor - a.setsAgainst;
                const setDiffB = b.setsFor - b.setsAgainst;
                if (setDiffB !== setDiffA) return setDiffB - setDiffA;
                
                const gameDiffA = a.gamesFor - a.gamesAgainst;
                const gameDiffB = b.gamesFor - b.gamesAgainst;
                if (gameDiffB !== gameDiffA) return gameDiffB - gameDiffA;
                
                return 0;
            });
        }

        function renderStandingsTable(pairs, showQualified) {
            let html = '<div class="table-container">';
            html += '<table>';
            html += '<thead><tr>';
            html += '<th>Pos</th>';
            html += '<th>Pareja</th>';
            html += '<th>PJ</th>';
            html += '<th>PG</th>';
            html += '<th>PP</th>';
            html += '<th>Pts</th>';
            html += '<th>SF</th>';
            html += '<th>SC</th>';
            html += '<th>Diff Sets</th>';
            html += '<th>GF</th>';
            html += '<th>GC</th>';
            html += '<th>Diff Games</th>';
            html += '</tr></thead>';
            html += '<tbody>';

            pairs.forEach((pair, index) => {
                const position = index + 1;
                const setDiff = pair.setsFor - pair.setsAgainst;
                const gameDiff = pair.gamesFor - pair.gamesAgainst;
                
                const qualifiedClass = showQualified && position <= 2 ? ' standings-qualified' : '';
                
                html += '<tr class="' + qualifiedClass + '">';
                html += '<td><strong>' + position + '</strong></td>';
                html += '<td><strong>' + pair.name + '</strong></td>';
                html += '<td>' + pair.played + '</td>';
                html += '<td>' + pair.won + '</td>';
                html += '<td>' + pair.lost + '</td>';
                html += '<td><strong>' + pair.points + '</strong></td>';
                html += '<td>' + pair.setsFor + '</td>';
                html += '<td>' + pair.setsAgainst + '</td>';
                html += '<td>' + (setDiff >= 0 ? '+' : '') + setDiff + '</td>';
                html += '<td>' + pair.gamesFor + '</td>';
                html += '<td>' + pair.gamesAgainst + '</td>';
                html += '<td>' + (gameDiff >= 0 ? '+' : '') + gameDiff + '</td>';
                html += '</tr>';
            });

            html += '</tbody>';
            html += '</table>';
            html += '</div>';

            if (showQualified) {
                html += '<div style="margin-top: 1rem; padding: 1rem; background: rgba(76, 175, 80, 0.1); border-left: 4px solid var(--success); border-radius: 5px;">';
                html += 'â Los primeros 2 clasifican a semifinales';
                html += '</div>';
            }

            return html;
        }

        // ============================================
        // PLAYOFFS (COMPLETE IMPLEMENTATION)
        // ============================================

        function populatePlayoffsTournamentSelect() {
            const season = appData.seasons[appData.currentSeason];
            const select = document.getElementById('playoffsTournamentSelect');
            
            let html = '<option value="">Seleccionar torneo...</option>';
            season.tournaments.forEach(tournament => {
                html += '<option value="' + tournament.id + '">' + tournament.name + '</option>';
            });
            
            select.innerHTML = html;
        }

        function renderPlayoffs() {
            const select = document.getElementById('playoffsTournamentSelect');
            const tournamentId = select.value;
            const container = document.getElementById('playoffsContent');

            if (!tournamentId) {
                container.innerHTML = '<p style="color: var(--text-light); text-align: center; padding: 2rem;">Selecciona un torneo</p>';
                return;
            }

            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === tournamentId);
            
            if (!tournament) return;

            // Check if tournament has playoffs configured
            const hasPlayoffsConfig = (tournament.type === 'cup') || 
                                     (tournament.playoffsConfig && tournament.playoffsConfig.enabled);

            if (!hasPlayoffsConfig) {
                container.innerHTML = '<div class="alert alert-info">Este torneo no tiene playoffs configurados.</div>';
                return;
            }

            // Check if playoffs should be generated
            if (tournament.type === 'cup') {
                if (!tournament.playoffs && canGeneratePlayoffs(tournament)) {
                    if (confirm('La fase de grupos estÃ¡ completa. Â¿Generar playoffs automÃ¡ticamente?')) {
                        generatePlayoffs(tournament);
                        saveData(appData);
                    }
                }
            } else if (tournament.type === 'league' || tournament.type === 'special') {
                if (!tournament.playoffs && canGenerateLeaguePlayoffs(tournament)) {
                    if (confirm('La fase regular estÃ¡ completa. Â¿Generar playoffs automÃ¡ticamente?')) {
                        generateLeaguePlayoffs(tournament);
                        saveData(appData);
                    }
                }
            }

            if (!tournament.playoffs) {
                if (tournament.type === 'cup') {
                    container.innerHTML = '<div class="alert alert-info">Los playoffs se generarÃ¡n automÃ¡ticamente cuando se complete la fase de grupos.</div>';
                } else {
                    container.innerHTML = '<div class="alert alert-info">Los playoffs se generarÃ¡n automÃ¡ticamente cuando se complete la fase regular.</div>';
                }
                return;
            }

            renderPlayoffsBracket(tournament, container);
        }

        function canGeneratePlayoffs(tournament) {
            if (!tournament.groups || !tournament.matches) return false;
            
            // Check if all group matches are completed
            const groupMatches = tournament.matches.filter(m => m.type === 'group_stage');
            if (groupMatches.length === 0) return false;
            
            const allCompleted = groupMatches.every(m => m.status === 'completed' || m.status === 'walkover');
            return allCompleted;
        }

        function generatePlayoffs(tournament) {
            showLoading('Generando playoffs...');

            setTimeout(() => {
                const qualified = [];

                tournament.groups.forEach(group => {
                    const groupPairs = group.pairs.map(pairId => 
                        tournament.pairs.find(p => p.id === pairId)
                    ).filter(p => p);

                    const sortedPairs = sortStandings(groupPairs);
                    qualified.push({
                        groupId: group.id,
                        groupName: group.name,
                        first: sortedPairs[0].id,
                        second: sortedPairs[1].id
                    });
                });

                const playoffs = {
                    semifinals: [],
                    final: null,
                    thirdPlace: null
                };

                const groupA = qualified.find(q => q.groupId === 'groupA');
                const groupB = qualified.find(q => q.groupId === 'groupB');

                let matchIdCounter = tournament.matches.length + 1;

                playoffs.semifinals.push({
                    id: 'psf1',
                    name: 'Semifinal 1',
                    pair1: groupA.first,
                    pair2: groupB.second,
                    pair1Players: tournament.pairs.find(p => p.id === groupA.first).players,
                    pair2Players: tournament.pairs.find(p => p.id === groupB.second).players,
                    status: 'pending',
                    result: null,
                    type: 'semifinal'
                });

                playoffs.semifinals.push({
                    id: 'psf2',
                    name: 'Semifinal 2',
                    pair1: groupB.first,
                    pair2: groupA.second,
                    pair1Players: tournament.pairs.find(p => p.id === groupB.first).players,
                    pair2Players: tournament.pairs.find(p => p.id === groupA.second).players,
                    status: 'pending',
                    result: null,
                    type: 'semifinal'
                });

                playoffs.final = {
                    id: 'pf',
                    name: 'Final',
                    pair1: null,
                    pair2: null,
                    pair1Players: null,
                    pair2Players: null,
                    status: 'pending',
                    result: null,
                    type: 'final'
                };

                playoffs.thirdPlace = {
                    id: 'p3rd',
                    name: '3er Lugar',
                    pair1: null,
                    pair2: null,
                    pair1Players: null,
                    pair2Players: null,
                    status: 'pending',
                    result: null,
                    type: 'third_place'
                };

                tournament.playoffs = playoffs;
                hideLoading();
                showNotification('Playoffs generados correctamente', 'success');
                renderPlayoffs();
            }, 500);
        }

        function canGenerateLeaguePlayoffs(tournament) {
            if (!tournament.playoffsConfig || !tournament.playoffsConfig.enabled) return false;
            if (!tournament.matches || tournament.matches.length === 0) return false;
            
            // Check if all regular matches are completed
            const regularMatches = tournament.matches.filter(m => !m.type || m.type === 'regular');
            if (regularMatches.length === 0) return false;
            
            const allCompleted = regularMatches.every(m => m.status === 'completed' || m.status === 'walkover');
            return allCompleted;
        }

        function generateLeaguePlayoffs(tournament) {
            showLoading('Generando playoffs...');

            setTimeout(() => {
                const qualified = tournament.playoffsConfig.qualified;
                const sortedPairs = sortStandings(tournament.pairs);
                const qualifiedPairs = sortedPairs.slice(0, qualified);

                const playoffs = {
                    preliminaries: [],
                    semifinals: [],
                    final: null,
                    thirdPlace: null
                };

                if (qualified === 2) {
                    // Direct final
                    playoffs.final = {
                        id: 'pf',
                        name: 'Final',
                        pair1: qualifiedPairs[0].id,
                        pair2: qualifiedPairs[1].id,
                        pair1Players: qualifiedPairs[0].players,
                        pair2Players: qualifiedPairs[1].players,
                        status: 'pending',
                        result: null,
                        type: 'final'
                    };
                } else if (qualified === 4) {
                    // Semifinals + Final
                    playoffs.semifinals.push({
                        id: 'psf1',
                        name: 'Semifinal 1',
                        pair1: qualifiedPairs[0].id,
                        pair2: qualifiedPairs[3].id,
                        pair1Players: qualifiedPairs[0].players,
                        pair2Players: qualifiedPairs[3].players,
                        status: 'pending',
                        result: null,
                        type: 'semifinal'
                    });

                    playoffs.semifinals.push({
                        id: 'psf2',
                        name: 'Semifinal 2',
                        pair1: qualifiedPairs[1].id,
                        pair2: qualifiedPairs[2].id,
                        pair1Players: qualifiedPairs[1].players,
                        pair2Players: qualifiedPairs[2].players,
                        status: 'pending',
                        result: null,
                        type: 'semifinal'
                    });

                    playoffs.final = {
                        id: 'pf',
                        name: 'Final',
                        pair1: null,
                        pair2: null,
                        pair1Players: null,
                        pair2Players: null,
                        status: 'pending',
                        result: null,
                        type: 'final'
                    };

                    playoffs.thirdPlace = {
                        id: 'p3rd',
                        name: '3er Lugar',
                        pair1: null,
                        pair2: null,
                        pair1Players: null,
                        pair2Players: null,
                        status: 'pending',
                        result: null,
                        type: 'third_place'
                    };
                } else if (qualified === 6 || qualified === 8) {
                    // Preliminaries + Semifinals + Final
                    // Preliminaries: 3rd vs 6th, 4th vs 5th (for 6) or more for 8
                    if (qualified === 6) {
                        playoffs.preliminaries.push({
                            id: 'pp1',
                            name: 'Preliminar 1',
                            pair1: qualifiedPairs[2].id,
                            pair2: qualifiedPairs[5].id,
                            pair1Players: qualifiedPairs[2].players,
                            pair2Players: qualifiedPairs[5].players,
                            status: 'pending',
                            result: null,
                            type: 'preliminary'
                        });

                        playoffs.preliminaries.push({
                            id: 'pp2',
                            name: 'Preliminar 2',
                            pair1: qualifiedPairs[3].id,
                            pair2: qualifiedPairs[4].id,
                            pair1Players: qualifiedPairs[3].players,
                            pair2Players: qualifiedPairs[4].players,
                            status: 'pending',
                            result: null,
                            type: 'preliminary'
                        });
                    } else { // 8 qualified
                        playoffs.preliminaries.push({
                            id: 'pp1',
                            name: 'Preliminar 1',
                            pair1: qualifiedPairs[2].id,
                            pair2: qualifiedPairs[5].id,
                            pair1Players: qualifiedPairs[2].players,
                            pair2Players: qualifiedPairs[5].players,
                            status: 'pending',
                            result: null,
                            type: 'preliminary'
                        });

                        playoffs.preliminaries.push({
                            id: 'pp2',
                            name: 'Preliminar 2',
                            pair1: qualifiedPairs[3].id,
                            pair2: qualifiedPairs[4].id,
                            pair1Players: qualifiedPairs[3].players,
                            pair2Players: qualifiedPairs[4].players,
                            status: 'pending',
                            result: null,
                            type: 'preliminary'
                        });

                        if (qualified === 8) {
                            playoffs.preliminaries.push({
                                id: 'pp3',
                                name: 'Preliminar 3',
                                pair1: qualifiedPairs[6].id,
                                pair2: qualifiedPairs[7].id,
                                pair1Players: qualifiedPairs[6].players,
                                pair2Players: qualifiedPairs[7].players,
                                status: 'pending',
                                result: null,
                                type: 'preliminary'
                            });
                        }
                    }

                    // Semifinals - will be filled after preliminaries
                    playoffs.semifinals.push({
                        id: 'psf1',
                        name: 'Semifinal 1',
                        pair1: qualifiedPairs[0].id,
                        pair2: null,
                        pair1Players: qualifiedPairs[0].players,
                        pair2Players: null,
                        status: 'pending',
                        result: null,
                        type: 'semifinal'
                    });

                    playoffs.semifinals.push({
                        id: 'psf2',
                        name: 'Semifinal 2',
                        pair1: qualifiedPairs[1].id,
                        pair2: null,
                        pair1Players: qualifiedPairs[1].players,
                        pair2Players: null,
                        status: 'pending',
                        result: null,
                        type: 'semifinal'
                    });

                    playoffs.final = {
                        id: 'pf',
                        name: 'Final',
                        pair1: null,
                        pair2: null,
                        pair1Players: null,
                        pair2Players: null,
                        status: 'pending',
                        result: null,
                        type: 'final'
                    };

                    playoffs.thirdPlace = {
                        id: 'p3rd',
                        name: '3er Lugar',
                        pair1: null,
                        pair2: null,
                        pair1Players: null,
                        pair2Players: null,
                        status: 'pending',
                        result: null,
                        type: 'third_place'
                    };
                }

                tournament.playoffs = playoffs;
                hideLoading();
                showNotification('Playoffs generados correctamente', 'success');
                renderPlayoffs();
            }, 500);
        }

        function renderPlayoffsBracket(tournament, container) {
            const playoffs = tournament.playoffs;
            
            let html = '<div class="bracket-container">';
            
            // Preliminaries (if exist)
            if (playoffs.preliminaries && playoffs.preliminaries.length > 0) {
                html += '<div class="bracket-round">';
                html += '<h3 style="text-align: center; margin-bottom: 1rem;">Preliminares</h3>';
                
                playoffs.preliminaries.forEach((match, index) => {
                    html += renderPlayoffMatch(match, tournament, 0);
                });
                
                html += '</div>';
            }
            
            // Semifinals
            if (playoffs.semifinals && playoffs.semifinals.length > 0) {
                html += '<div class="bracket-round">';
                html += '<h3 style="text-align: center; margin-bottom: 1rem;">Semifinales</h3>';
                
                playoffs.semifinals.forEach((match, index) => {
                    html += renderPlayoffMatch(match, tournament, index + 1);
                });
                
                html += '</div>';
            }

            // Finals
            html += '<div class="bracket-round">';
            html += '<h3 style="text-align: center; margin-bottom: 1rem;">Final</h3>';
            html += renderPlayoffMatch(playoffs.final, tournament, 0);
            html += '</div>';

            // Champion
            html += '<div class="bracket-round">';
            html += '<h3 style="text-align: center; margin-bottom: 1rem;">CampeÃ³n</h3>';
            html += '<div class="bracket-match" style="min-height: 150px; display: flex; align-items: center; justify-content: center;">';
            html += '<div style="text-align: center;">';
            html += '<div style="font-size: 3rem;">ð</div>';
            if (playoffs.final && playoffs.final.result) {
                const champion = tournament.pairs.find(p => p.id === playoffs.final.result.winner);
                html += '<div style="margin-top: 1rem; font-weight: bold; font-size: 1.2rem;">' + champion.name + '</div>';
            } else {
                html += '<div style="margin-top: 1rem; color: var(--text-light);">Ganador Final</div>';
            }
            html += '</div>';
            html += '</div>';
            html += '</div>';

            html += '</div>';

            // 3rd place match
            if (playoffs.thirdPlace) {
                html += '<div style="margin-top: 2rem;">';
                html += '<h3 style="margin-bottom: 1rem;">Partido por el 3er Lugar</h3>';
                html += '<div style="max-width: 400px; margin: 0 auto;">';
                html += renderPlayoffMatch(playoffs.thirdPlace, tournament, 0);
                html += '</div>';
                html += '</div>';
            }

            container.innerHTML = html;
        }

        function renderPlayoffMatch(match, tournament, semifinalNum) {
            const matchClass = match.status === 'completed' ? 'completed' : '';
            
            let html = '<div class="bracket-match ' + matchClass + '">';
            
            if (match.pair1 && match.pair2) {
                const pair1 = tournament.pairs.find(p => p.id === match.pair1);
                const pair2 = tournament.pairs.find(p => p.id === match.pair2);
                
                if (pair1 && pair2) {
                    const isPair1Winner = match.result && match.result.winner === match.pair1;
                    const isPair2Winner = match.result && match.result.winner === match.pair2;
                    
                    html += '<div class="bracket-team ' + (isPair1Winner ? 'winner' : '') + '">';
                    html += pair1.name;
                    if (match.result) {
                        html += '<span class="bracket-score">' + (match.result.sets1 || 0) + '</span>';
                    }
                    html += '</div>';
                    
                    html += '<div class="bracket-team ' + (isPair2Winner ? 'winner' : '') + '">';
                    html += pair2.name;
                    if (match.result) {
                        html += '<span class="bracket-score">' + (match.result.sets2 || 0) + '</span>';
                    }
                    html += '</div>';
                    
                    if (match.status === 'pending' && tournament.status === 'active') {
                        html += '<button class="btn btn-primary" style="margin-top: 1rem; width: 100%;" onclick="openPlayoffMatchModal(\'' + tournament.id + '\', \'' + match.id + '\')">Registrar Resultado</button>';
                    }
                } else {
                    html += '<div style="color: var(--text-light); text-align: center; padding: 1rem;">Esperando parejas...</div>';
                }
            } else {
                if (semifinalNum > 0) {
                    html += '<div style="color: var(--text-light); padding: 0.5rem;">1Âº Grupo ' + (semifinalNum === 1 ? 'A' : 'B') + '</div>';
                    html += '<div style="color: var(--text-light); padding: 0.5rem;">2Âº Grupo ' + (semifinalNum === 1 ? 'B' : 'A') + '</div>';
                } else {
                    html += '<div style="color: var(--text-light); text-align: center; padding: 1rem;">Esperando ganadores de semifinales</div>';
                }
            }
            
            html += '</div>';
            return html;
        }

     function openPlayoffMatchModal(tournamentId, matchId) {
    currentTournamentId = tournamentId;
    currentMatchId = matchId;
    isEditingMatch = false;
    
    // NUEVO: Marcar que este es un partido de playoff
    window.currentMatchIsPlayoff = true;

    const season = appData.seasons[appData.currentSeason];
    const tournament = season.tournaments.find(t => t.id === tournamentId);
    
    let match = null;
    if (tournament.playoffs.preliminaries) {
        match = tournament.playoffs.preliminaries.find(m => m.id === matchId);
    }
    if (!match && tournament.playoffs.semifinals) {
        match = tournament.playoffs.semifinals.find(m => m.id === matchId);
    }
    if (!match && tournament.playoffs.final?.id === matchId) {
        match = tournament.playoffs.final;
    }
    if (!match && tournament.playoffs.thirdPlace?.id === matchId) {
        match = tournament.playoffs.thirdPlace;
    }

    if (!match || !tournament) return;

    const pair1 = tournament.pairs.find(p => p.id === match.pair1);
    const pair2 = tournament.pairs.find(p => p.id === match.pair2);

    const matchInfo = document.getElementById('matchInfo');
    matchInfo.innerHTML = '<div style="text-align: center; padding: 1rem; background: var(--bg-light); border-radius: 5px;">';
    matchInfo.innerHTML += '<div style="font-weight: bold; color: var(--primary); margin-bottom: 0.5rem;">ð ' + match.name + '</div>';
    matchInfo.innerHTML += '<strong>' + pair1.name + '</strong> vs <strong>' + pair2.name + '</strong>';
    matchInfo.innerHTML += '</div>';

    const walkoverWinner = document.getElementById('walkoverWinner');
    walkoverWinner.innerHTML = '<option value="">Seleccionar...</option>';
    walkoverWinner.innerHTML += '<option value="' + pair1.id + '">' + pair1.name + '</option>';
    walkoverWinner.innerHTML += '<option value="' + pair2.id + '">' + pair2.name + '</option>';

    resetMatchResultForm();
    document.getElementById('matchResultModal').classList.add('active');
}

        function savePlayoffMatchResult() {
            const isWalkover = document.getElementById('isWalkover').checked;
            const errorDiv = document.getElementById('matchResultError');
            errorDiv.style.display = 'none';

            const season = appData.seasons[appData.currentSeason];
            const tournament = season.tournaments.find(t => t.id === currentTournamentId);
            
            let match = null;
            let isPlayoffMatch = false;
            
            if (tournament.playoffs) {
                if (tournament.playoffs.preliminaries) {
                    match = tournament.playoffs.preliminaries.find(m => m.id === currentMatchId);
                    if (match) isPlayoffMatch = true;
                }
                if (!match && tournament.playoffs.semifinals) {
                    match = tournament.playoffs.semifinals.find(m => m.id === currentMatchId);
                    if (match) isPlayoffMatch = true;
                }
                if (!match && tournament.playoffs.final?.id === currentMatchId) {
                    match = tournament.playoffs.final;
                    isPlayoffMatch = true;
                }
                if (!match && tournament.playoffs.thirdPlace?.id === currentMatchId) {
                    match = tournament.playoffs.thirdPlace;
                    isPlayoffMatch = true;
                }
            }

            // If not a playoff match, handle as regular match
            if (!isPlayoffMatch) {
                match = tournament.matches.find(m => m.id === currentMatchId);
                if (match) {
                    saveMatchResult();
                    return;
                }
            }

            if (!match || !tournament) return;

            // Save result similar to regular match
            if (isWalkover) {
                const winnerId = document.getElementById('walkoverWinner').value;
                const reason = document.getElementById('walkoverReason').value;
                const customReason = document.getElementById('customReason').value;

                if (!winnerId || !reason) {
                    alert('Por favor completa todos los campos requeridos');
                    return;
                }

                match.status = 'completed';
                match.walkoverReason = reason === 'other' ? customReason : reason;
                match.result = {
                    winner: winnerId,
                    loser: winnerId === match.pair1 ? match.pair2 : match.pair1,
                    sets1: winnerId === match.pair1 ? 2 : 0,
                    sets2: winnerId === match.pair2 ? 2 : 0,
                    sets: [
                        { team1: winnerId === match.pair1 ? 6 : 0, team2: winnerId === match.pair2 ? 6 : 0 },
                        { team1: winnerId === match.pair1 ? 6 : 0, team2: winnerId === match.pair2 ? 6 : 0 }
                    ],
                    isWalkover: true
                };
            } else {
                const isIncomplete = document.getElementById('isIncompleteMatch').checked;
                const set1_1 = document.getElementById('set1Team1').value;
                const set1_2 = document.getElementById('set1Team2').value;
                const set2_1 = document.getElementById('set2Team1').value;
                const set2_2 = document.getElementById('set2Team2').value;
                const set3_1 = document.getElementById('set3Team1').value;
                const set3_2 = document.getElementById('set3Team2').value;

                if (!set1_1 || !set1_2 || !set2_1 || !set2_2) {
                    errorDiv.textContent = 'Los primeros dos sets son obligatorios';
                    errorDiv.style.display = 'block';
                    return;
                }

                if (!validateTennisScore(set1_1, set1_2, isIncomplete)) {
                    errorDiv.textContent = 'Set 1: Marcador invÃ¡lido';
                    errorDiv.style.display = 'block';
                    return;
                }

                if (!validateTennisScore(set2_1, set2_2, isIncomplete)) {
                    errorDiv.textContent = 'Set 2: Marcador invÃ¡lido';
                    errorDiv.style.display = 'block';
                    return;
                }

                if ((set3_1 || set3_2) && !validateTennisScore(set3_1, set3_2, isIncomplete)) {
                    errorDiv.textContent = 'Set 3: Marcador invÃ¡lido';
                    errorDiv.style.display = 'block';
                    return;
                }

                const sets = [
                    { team1: parseInt(set1_1), team2: parseInt(set1_2) },
                    { team1: parseInt(set2_1), team2: parseInt(set2_2) }
                ];

                if (set3_1 && set3_2) {
                    sets.push({ team1: parseInt(set3_1), team2: parseInt(set3_2) });
                }

                let setsTeam1 = 0;
                let setsTeam2 = 0;

                sets.forEach(set => {
                    if (set.team1 > set.team2) setsTeam1++;
                    else if (set.team2 > set.team1) setsTeam2++;
                });

                const winner = setsTeam1 > setsTeam2 ? match.pair1 : match.pair2;

                match.status = 'completed';
                match.result = {
                    winner: winner,
                    loser: winner === match.pair1 ? match.pair2 : match.pair1,
                    sets1: setsTeam1,
                    sets2: setsTeam2,
                    sets: sets,
                    isIncomplete: isIncomplete
                };
            }

            // Update next matches if needed
            updatePlayoffBracket(tournament, match);

            saveData(appData);
            closeMatchResultModal();
            renderPlayoffs();
            
            showNotification('Resultado de playoff registrado correctamente', 'success')
            window.isPlayoffMatchModal = false;
        }

        function updatePlayoffBracket(tournament, completedMatch) {
            const playoffs = tournament.playoffs;
            
            if (!completedMatch.result) return;

            const winner = completedMatch.result.winner;
            const loser = completedMatch.result.loser;
            const winnerPair = tournament.pairs.find(p => p.id === winner);
            const loserPair = tournament.pairs.find(p => p.id === loser);

            // If preliminary match
            if (completedMatch.type === 'preliminary') {
                // Find which semifinal to update
                const prelimIndex = playoffs.preliminaries.findIndex(p => p.id === completedMatch.id);
                
                if (playoffs.semifinals && playoffs.semifinals.length >= 2) {
                    // For 6 or 8 qualified: Winner of PP1 goes to SF2, Winner of PP2 goes to SF1
                    if (prelimIndex === 0) {
                        // Winner of PP1 faces 2nd place (SF2)
                        if (!playoffs.semifinals[1].pair2) {
                            playoffs.semifinals[1].pair2 = winner;
                            playoffs.semifinals[1].pair2Players = winnerPair.players;
                        }
                    } else if (prelimIndex === 1) {
                        // Winner of PP2 faces 1st place (SF1)
                        if (!playoffs.semifinals[0].pair2) {
                            playoffs.semifinals[0].pair2 = winner;
                            playoffs.semifinals[0].pair2Players = winnerPair.players;
                        }
                    } else if (prelimIndex === 2) {
                        // For 8 qualified, third preliminary winner
                        // This goes to whichever semi doesn't have pair2 yet
                        for (let i = 0; i < playoffs.semifinals.length; i++) {
                            if (!playoffs.semifinals[i].pair2) {
                                playoffs.semifinals[i].pair2 = winner;
                                playoffs.semifinals[i].pair2Players = winnerPair.players;
                                break;
                            }
                        }
                    }
                }
            }

            // If semifinal, update final and third place
            if (completedMatch.type === 'semifinal') {
                if (playoffs.final.pair1 === null) {
                    playoffs.final.pair1 = winner;
                    playoffs.final.pair1Players = winnerPair.players;
                } else if (playoffs.final.pair2 === null) {
                    playoffs.final.pair2 = winner;
                    playoffs.final.pair2Players = winnerPair.players;
                }

                if (playoffs.thirdPlace) {
                    if (playoffs.thirdPlace.pair1 === null) {
                        playoffs.thirdPlace.pair1 = loser;
                        playoffs.thirdPlace.pair1Players = loserPair.players;
                    } else if (playoffs.thirdPlace.pair2 === null) {
                        playoffs.thirdPlace.pair2 = loser;
                        playoffs.thirdPlace.pair2Players = loserPair.players;
                    }
                }
            }

            // Check if tournament is complete
            const isComplete = playoffs.final.status === 'completed' && 
                              (!playoffs.thirdPlace || playoffs.thirdPlace.status === 'completed');
            
            if (isComplete) {
                finishTournament(tournament);
            }
        }

        function finishTournament(tournament) {
            const playoffs = tournament.playoffs;
            const season = appData.seasons[appData.currentSeason];

            // Assign final positions
            const champion = tournament.pairs.find(p => p.id === playoffs.final.result.winner);
            const runnerUp = tournament.pairs.find(p => p.id === playoffs.final.result.loser);
            
            champion.finalPosition = 1;
            runnerUp.finalPosition = 2;

            if (playoffs.thirdPlace && playoffs.thirdPlace.result) {
                const third = tournament.pairs.find(p => p.id === playoffs.thirdPlace.result.winner);
                const fourth = tournament.pairs.find(p => p.id === playoffs.thirdPlace.result.loser);
                third.finalPosition = 3;
                fourth.finalPosition = 4;
// Recalcular rankings despuÃ©s de finalizar el torneo
    recalculateAllRankings();
            }

            // Assign remaining positions based on playoff format
            if (tournament.type === 'cup') {
                // For cups: assign positions 5-8 based on group standings
                let position = 5;
                tournament.groups.forEach(group => {
                    const groupPairs = group.pairs.map(pairId => 
                        tournament.pairs.find(p => p.id === pairId)
                    ).filter(p => p);

                    const sortedPairs = sortStandings(groupPairs);
                    
                    // Skip the top 2 (already in playoffs)
                    for (let i = 2; i < sortedPairs.length; i++) {
                        if (!sortedPairs[i].finalPosition) {
                            sortedPairs[i].finalPosition = position++;
                        }
                    }
                });
            } else {
                // For leagues: assign positions based on regular season standings
                const sortedPairs = sortStandings(tournament.pairs);
                let position = 5;
                
                sortedPairs.forEach(pair => {
                    if (!pair.finalPosition) {
                        pair.finalPosition = position++;
                    }
                });
            }

            // Update player stats
            tournament.pairs.forEach(pair => {
                pair.players.forEach(playerId => {
                    const player = season.players.find(p => p.id === playerId);
                    if (player) {
                        player.totalWins += pair.won;
                        player.totalLosses += pair.lost;
                        
                        if (pair.finalPosition === 1) {
                            player.titles += 1;
                        } else if (pair.finalPosition === 2) {
                            player.runnerUps += 1;
                        }

                        if (!player.tournaments) player.tournaments = [];
                        player.tournaments.push({
                            tournamentId: tournament.id,
                            tournamentName: tournament.name,
                            position: pair.finalPosition,
                            date: tournament.date
                        });
                    }
                });
            });

            tournament.status = 'completed';
            
            recalculateAllRankings();
            showNotification('Â¡Torneo completado! CampeÃ³n: ' + champion.name, 'success');
        }

       function saveMatchResult() {
    // NUEVO: Verificar si es partido de playoff usando la variable global
    if (window.currentMatchIsPlayoff === true) {
        savePlayoffMatchResult();
        return;
    }
    
    // CÃ³digo normal para partidos regulares
    const isWalkover = document.getElementById('isWalkover').checked;
    const errorDiv = document.getElementById('matchResultError');
    errorDiv.style.display = 'none';

    const season = appData.seasons[appData.currentSeason];
    const tournament = season.tournaments.find(t => t.id === currentTournamentId);
    const match = tournament.matches.find(m => m.id === currentMatchId);

    if (!match || !tournament) return;

    // If editing, revert previous stats first
    if (isEditingMatch && match.status !== 'pending') {
        revertMatchStats(tournament, match);
    }

    if (isWalkover) {
        const winnerId = document.getElementById('walkoverWinner').value;
        const reason = document.getElementById('walkoverReason').value;
        const customReason = document.getElementById('customReason').value;

        if (!winnerId || !reason) {
            alert('Por favor completa todos los campos requeridos');
            return;
        }

        const loserId = winnerId === match.pair1 ? match.pair2 : match.pair1;
        const loserPair = tournament.pairs.find(p => p.id === loserId);

        match.status = 'walkover';
        match.walkoverReason = reason === 'other' ? customReason : reason;
        match.result = {
            winner: winnerId,
            loser: loserId,
            sets1: winnerId === match.pair1 ? 2 : 0,
            sets2: winnerId === match.pair2 ? 2 : 0,
            sets: [
                { team1: winnerId === match.pair1 ? 6 : 0, team2: winnerId === match.pair2 ? 6 : 0 },
                { team1: winnerId === match.pair1 ? 6 : 0, team2: winnerId === match.pair2 ? 6 : 0 }
            ],
            isWalkover: true
        };

        let penaltyPoints = 0;
        if (reason === 'late_5_14') {
            penaltyPoints = -2;
        } else if (reason === 'late_15_plus' || reason === 'no_show') {
            penaltyPoints = -3;
        }

        if (penaltyPoints !== 0) {
            loserPair.points += penaltyPoints;
            
            if (!tournament.penalties) tournament.penalties = [];
            tournament.penalties.push({
                pairId: loserId,
                playerId: null,
                points: Math.abs(penaltyPoints),
                reason: match.walkoverReason,
                date: new Date().toISOString(),
                matchId: match.id
            });
        }

        const winnerPair = tournament.pairs.find(p => p.id === winnerId);
        winnerPair.played += 1;
        winnerPair.won += 1;
        winnerPair.points += 3;
        winnerPair.setsFor += 2;

        loserPair.played += 1;
        loserPair.lost += 1;
        loserPair.setsAgainst += 2;

    } else {
        const isIncomplete = document.getElementById('isIncompleteMatch').checked;
        const set1_1 = document.getElementById('set1Team1').value;
        const set1_2 = document.getElementById('set1Team2').value;
        const set2_1 = document.getElementById('set2Team1').value;
        const set2_2 = document.getElementById('set2Team2').value;
        const set3_1 = document.getElementById('set3Team1').value;
        const set3_2 = document.getElementById('set3Team2').value;

        if (!set1_1 || !set1_2 || !set2_1 || !set2_2) {
            errorDiv.textContent = 'Los primeros dos sets son obligatorios';
            errorDiv.style.display = 'block';
            return;
        }

        if (!validateTennisScore(set1_1, set1_2, isIncomplete)) {
            errorDiv.textContent = 'Set 1: Marcador invÃ¡lido de tenis';
            errorDiv.style.display = 'block';
            return;
        }

        if (!validateTennisScore(set2_1, set2_2, isIncomplete)) {
            errorDiv.textContent = 'Set 2: Marcador invÃ¡lido de tenis';
            errorDiv.style.display = 'block';
            return;
        }

        if ((set3_1 || set3_2) && !validateTennisScore(set3_1, set3_2, isIncomplete)) {
            errorDiv.textContent = 'Set 3: Marcador invÃ¡lido de tenis';
            errorDiv.style.display = 'block';
            return;
        }

        const sets = [
            { team1: parseInt(set1_1), team2: parseInt(set1_2) },
            { team1: parseInt(set2_1), team2: parseInt(set2_2) }
        ];

        if (set3_1 && set3_2) {
            sets.push({ team1: parseInt(set3_1), team2: parseInt(set3_2) });
        }

        let setsTeam1 = 0;
        let setsTeam2 = 0;
        let gamesTeam1 = 0;
        let gamesTeam2 = 0;

        sets.forEach(set => {
            if (set.team1 > set.team2) setsTeam1++;
            else if (set.team2 > set.team1) setsTeam2++;
            gamesTeam1 += set.team1;
            gamesTeam2 += set.team2;
        });

        const winner = setsTeam1 > setsTeam2 ? match.pair1 : match.pair2;
        const loser = winner === match.pair1 ? match.pair2 : match.pair1;

        match.status = 'completed';
        match.winner = winner;
        match.result = {
            winner: winner,
            loser: loser,
            sets1: setsTeam1,
            sets2: setsTeam2,
            games1: gamesTeam1,
            games2: gamesTeam2,
            sets: sets,
            isIncomplete: isIncomplete
        };

        const pair1 = tournament.pairs.find(p => p.id === match.pair1);
        const pair2 = tournament.pairs.find(p => p.id === match.pair2);

        pair1.played += 1;
        pair2.played += 1;

        if (winner === match.pair1) {
            pair1.won += 1;
            pair1.points += 3;
            pair2.lost += 1;
        } else {
            pair2.won += 1;
            pair2.points += 3;
            pair1.lost += 1;
        }

        pair1.setsFor += setsTeam1;
        pair1.setsAgainst += setsTeam2;
        pair1.gamesFor += gamesTeam1;
        pair1.gamesAgainst += gamesTeam2;

        pair2.setsFor += setsTeam2;
        pair2.setsAgainst += setsTeam1;
        pair2.gamesFor += gamesTeam2;
        pair2.gamesAgainst += gamesTeam1;
    }

    saveData(appData);
    closeMatchResultModal();
    renderCalendar();
    renderStandings();
    
    const action = isEditingMatch ? 'actualizado' : 'registrado';
    showNotification('Resultado ' + action + ' correctamente', 'success');
}

        // ============================================
        // RANKING SYSTEM
        // ============================================

        function getBasePoints(position, pairCount, tournamentType) {
            if (tournamentType === 'league') {
                if (pairCount === 8) {
                    if (position === 1) return 1000;
                    if (position === 2) return 700;
                    if (position >= 3 && position <= 4) return 500;
                    if (position >= 5 && position <= 6) return 300;
                    return 150;
                } else if (pairCount === 6) {
                    if (position === 1) return 800;
                    if (position === 2) return 560;
                    if (position >= 3 && position <= 4) return 400;
                    return 200;
                } else if (pairCount === 4) {
                    if (position === 1) return 600;
                    if (position === 2) return 420;
                    return 250;
                }
            }
            
            if (tournamentType === 'cup') {
                if (pairCount >= 6) {
                    if (position === 1) return 700;
                    if (position === 2) return 490;
                    if (position >= 3 && position <= 4) return 350;
                    return 210;
                }
            }
            
            return 0;
        }

        function getVictoryPoints(matchType) {
            switch(matchType) {
                case 'regular': return 30;
                case 'group_stage': return 30;
                case 'preliminary': return 50;
                case 'semifinal': return 75;
                case 'final': return 100;
                case 'third_place': return 50;
                default: return 30;
            }
        }

        function calculatePerformanceMultiplier(wins, totalMatches) {
            if (totalMatches === 0) return 1.0;
            return 1.0 + (wins / totalMatches * 0.3);
        }

        function calculateDecay(tournamentDate, tournamentType) {
            if (tournamentType === 'special') return 1.0;

            const tournamentTime = new Date(tournamentDate).getTime();
            const currentTime = new Date('2025-10-01').getTime();
            const monthsDiff = (currentTime - tournamentTime) / (1000 * 60 * 60 * 24 * 30);

            if (monthsDiff < 12) return 1.0;
            if (monthsDiff < 18) return 0.75;
            if (monthsDiff < 24) return 0.5;
            if (monthsDiff < 30) return 0.25;
            return 0;
        }

        function getRankBadge(points) {
            if (points >= 5000) return 'ð';
            if (points >= 4000) return 'ð';
            if (points >= 3000) return 'ð´';
            if (points >= 2000) return 'ð ';
            if (points >= 1000) return 'ð¡';
            if (points >= 500) return 'ð¢';
            return 'ðµ';
        }

        function calculatePlayerRanking(playerId) {
            const season = appData.seasons[appData.currentSeason];
            const player = season.players.find(p => p.id === playerId);
            
            if (!player) return { totalPoints: 0, breakdown: [] };

            let totalPoints = 0;
            let tournamentBreakdown = [];

            season.tournaments.forEach(tournament => {
                if (tournament.status !== 'completed') return;

                const pair = tournament.pairs.find(p => p.players.includes(playerId));
                if (!pair) return;

                const position = pair.finalPosition || 0;
                if (position === 0) return;

                const basePoints = getBasePoints(position, tournament.pairs.length, tournament.type);
                const multiplier = calculatePerformanceMultiplier(pair.won, pair.played);
                const weight = tournament.weight;
                const positionPoints = basePoints * weight * multiplier;

                let victoryPoints = 0;
                if (tournament.matches) {
                    tournament.matches.forEach(match => {
                        if ((match.status === 'completed' || match.status === 'walkover') && match.result) {
                            const winnerPair = tournament.pairs.find(p => p.id === match.result.winner);
                            if (winnerPair && winnerPair.players.includes(playerId)) {
                                victoryPoints += getVictoryPoints(match.type || 'regular');
                            }
                        }
                    });
                }

                const decay = calculateDecay(tournament.date, tournament.type);
                const tournamentTotal = (positionPoints + victoryPoints) * decay;

                totalPoints += tournamentTotal;

                tournamentBreakdown.push({
                    tournamentId: tournament.id,
                    tournamentName: tournament.name,
                    tournamentType: tournament.type,
                    position: position,
                    basePoints: Math.round(positionPoints),
                    victoryPoints: victoryPoints,
                    decay: decay,
                    total: Math.round(tournamentTotal)
                });
            });

            return {
                totalPoints: Math.round(totalPoints),
                breakdown: tournamentBreakdown
            };
        }

        function recalculateAllRankings() {
            showLoading('Recalculando rankings...');

            setTimeout(() => {
                const season = appData.seasons[appData.currentSeason];
                
                season.players.forEach(player => {
                    const ranking = calculatePlayerRanking(player.id);
                    player.rankingPoints = ranking.totalPoints;
                    player.rankingBreakdown = ranking.breakdown;
                });

                saveData(appData);
                hideLoading();
                renderRankingTable();
                renderDashboard();
                
                showNotification('Rankings recalculados correctamente', 'success');
            }, 500);
        }

        function renderRankingTable() {
            const season = appData.seasons[appData.currentSeason];
            const tbody = document.getElementById('rankingTable');
            
            // Get filter values
            const searchTerm = document.getElementById('rankingSearch') ? document.getElementById('rankingSearch').value.toLowerCase() : '';
            const statusFilter = document.getElementById('rankingFilter') ? document.getElementById('rankingFilter').value : 'all';
            const pointsFilter = document.getElementById('rankingPointsFilter') ? document.getElementById('rankingPointsFilter').value : 'all';

            // Apply filters
            let filteredPlayers = season.players.filter(player => {
                if (!player.name.toLowerCase().includes(searchTerm)) return false;
                
                if (statusFilter === 'active' && !player.active) return false;
                if (statusFilter === 'inactive' && player.active) return false;
                
                if (pointsFilter === '5000+' && player.rankingPoints < 5000) return false;
                if (pointsFilter === '3000-5000' && (player.rankingPoints < 3000 || player.rankingPoints >= 5000)) return false;
                if (pointsFilter === '1000-3000' && (player.rankingPoints < 1000 || player.rankingPoints >= 3000)) return false;
                if (pointsFilter === '0-1000' && player.rankingPoints >= 1000) return false;
                
                return true;
            });

            const sortedPlayers = [...filteredPlayers].sort((a, b) => b.rankingPoints - a.rankingPoints);

            if (sortedPlayers.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8" style="text-align: center; padding: 2rem; color: var(--text-light);">No hay jugadores que coincidan con los filtros</td></tr>';
                return;
            }

            let html = '';
            sortedPlayers.forEach((player, index) => {
                const position = index + 1;
                const totalMatches = player.totalWins + player.totalLosses;
                const winRate = totalMatches > 0 ? ((player.totalWins / totalMatches) * 100).toFixed(1) : '0.0';
                const badge = getRankBadge(player.rankingPoints);

                let positionBadge = '';
                if (position === 1) positionBadge = '<span class="badge badge-gold">ð¥</span>';
                else if (position === 2) positionBadge = '<span class="badge badge-silver">ð¥</span>';
                else if (position === 3) positionBadge = '<span class="badge badge-bronze">ð¥</span>';

                html += '<tr style="cursor: pointer;" onclick="showPlayerRankingBreakdown(\'' + player.id + '\')" title="Click para ver desglose">';
                html += '<td><strong>' + position + '</strong></td>';
                html += '<td><strong>' + player.name + '</strong> ' + positionBadge + ' <span class="rank-badge" style="background: var(--primary); color: white;">' + badge + '</span></td>';
                html += '<td><strong>' + player.rankingPoints.toLocaleString() + '</strong></td>';
                html += '<td>' + (player.tournaments ? player.tournaments.length : 0) + '</td>';
                html += '<td>' + player.titles + '</td>';
                html += '<td>' + player.runnerUps + '</td>';
                html += '<td>' + player.totalWins + '-' + player.totalLosses + '</td>';
                html += '<td>' + winRate + '%</td>';
                html += '</tr>';
            });

            tbody.innerHTML = html;
        }

        function showPlayerRankingBreakdown(playerId) {
            const season = appData.seasons[appData.currentSeason];
            const player = season.players.find(p => p.id === playerId);
            
            if (!player) return;

            const rankingData = calculatePlayerRanking(playerId);

            let html = '<div style="max-height: 70vh; overflow-y: auto;">';
            
            html += '<h3 style="margin-bottom: 1rem;">' + player.name + '</h3>';
            html += '<div style="background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%); color: white; padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem; text-align: center;">';
            html += '<div style="font-size: 0.9rem; opacity: 0.9;">Puntos Totales de Ranking</div>';
            html += '<div style="font-size: 3rem; font-weight: bold;">' + rankingData.totalPoints.toLocaleString() + '</div>';
            html += '<div style="font-size: 0.9rem; opacity: 0.9;">' + getRankBadge(rankingData.totalPoints) + '</div>';
            html += '</div>';

            if (rankingData.breakdown.length === 0) {
                html += '<p style="color: var(--text-light); text-align: center;">No hay torneos completados aÃºn</p>';
            } else {
                html += '<h4 style="margin-bottom: 1rem;">Desglose por Torneo</h4>';
                
                rankingData.breakdown.forEach(t => {
                    const typeLabel = t.tournamentType === 'league' ? 'ð Liga' : 
                                     t.tournamentType === 'cup' ? 'ð Copa' : 'â­ Especial';
                    
                    html += '<div style="background: var(--bg-light); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid var(--primary);">';
                    html += '<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">';
                    html += '<strong>' + t.tournamentName + '</strong>';
                    html += '<span style="background: var(--primary); color: white; padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.85rem;">' + t.total.toLocaleString() + ' pts</span>';
                    html += '</div>';
                    html += '<div style="font-size: 0.9rem; color: var(--text-light);">' + typeLabel + ' | PosiciÃ³n: ' + t.position + 'Âº</div>';
                    html += '</div>';
                });
            }
            
            html += '</div>';

            const modal = document.createElement('div');
            modal.className = 'modal active';
            modal.innerHTML = '<div class="modal-content" style="max-width: 600px;">' +
                '<div class="modal-header">' +
                '<h3 class="modal-title">Desglose de Ranking</h3>' +
                '<button class="modal-close" onclick="this.closest(\'.modal\').remove()">â</button>' +
                '</div>' +
                html +
                '<div class="modal-actions">' +
                '<button class="btn btn-primary" onclick="this.closest(\'.modal\').remove()">Cerrar</button>' +
                '</div>' +
                '</div>';
            
            document.body.appendChild(modal);
        }

        // ============================================
        // DATA MANAGEMENT
        // ============================================

        function updateDataDashboard() {
            const season = appData.seasons[appData.currentSeason];
            
            document.getElementById('dataCurrentSeason').textContent = appData.currentSeason;
            document.getElementById('dataPlayerCount').textContent = season.players.length;
            document.getElementById('dataTournamentCount').textContent = season.tournaments.length;
            
            const dataSize = new Blob([JSON.stringify(appData)]).size;
            const sizeKB = (dataSize / 1024).toFixed(2);
            document.getElementById('dataStorageSize').textContent = sizeKB + ' KB';
        }

        function exportBackup() {
            const dataStr = JSON.stringify(appData, null, 2);
            const blob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'padel-backup-' + new Date().toISOString().split('T')[0] + '.json';
            a.click();
            URL.revokeObjectURL(url);
            
            showNotification('Backup exportado correctamente', 'success');
        }

        function importBackup(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    
                    if (!importedData.version || !importedData.seasons) {
                        alert('Archivo de backup invÃ¡lido');
                        return;
                    }

                    if (confirm('Â¿EstÃ¡s seguro de que deseas importar este backup? Esto reemplazarÃ¡ todos los datos actuales.')) {
                        appData = importedData;
                        saveData(appData);
                        location.reload();
                    }
                } catch (error) {
                    alert('Error al leer el archivo: ' + error.message);
                }
            };
            reader.readAsText(file);
        }

        function deleteCurrentSeasonData() {
            if (!confirm('Â¿Borrar TODOS los datos de la temporada ' + appData.currentSeason + '?\n\nNO se puede deshacer.')) {
                return;
            }

            appData.seasons[appData.currentSeason] = {
                players: [],
                tournaments: []
            };

            saveData(appData);
            location.reload();
        }

        function deleteAllData() {
            if (!confirm('Â¿Borrar TODOS los datos de TODAS las temporadas?\n\nNO se puede deshacer.')) {
                return;
            }

            appData = getDefaultData();
            saveData(appData);
            location.reload();
        }

        // ============================================
        // INITIALIZATION
        // ============================================
// ============================================
// IMPORT TOURNAMENT FUNCTIONALITY
// ============================================

function openImportTournamentModal() {
    const season = appData.seasons[appData.currentSeason];
    const activePlayers = season.players.filter(p => p.active);
    
    if (activePlayers.length < 8) {
        alert('Necesitas al menos 8 jugadores activos para importar un torneo');
        return;
    }

    // Poblar todos los selectores de jugadores
    const playerSelects = [
        'importSF1P1', 'importSF1P2', 'importSF1P3', 'importSF1P4',
        'importSF2P1', 'importSF2P2', 'importSF2P3', 'importSF2P4'
    ];

    playerSelects.forEach(selectId => {
        const select = document.getElementById(selectId);
        let html = '<option value="">Seleccionar...</option>';
        activePlayers.forEach(player => {
            html += '<option value="' + player.id + '">' + player.name + '</option>';
        });
        select.innerHTML = html;
    });

    // Resetear campos
    document.getElementById('importTournamentName').value = '';
    document.getElementById('importTournamentDate').value = new Date().toISOString().split('T')[0];
    document.getElementById('importTournamentType').value = 'cup';
    document.getElementById('importSF1Sets1').value = '';
    document.getElementById('importSF1Sets2').value = '';
    document.getElementById('importSF2Sets1').value = '';
    document.getElementById('importSF2Sets2').value = '';

    document.getElementById('importTournamentModal').classList.add('active');
}

function closeImportTournamentModal() {
    document.getElementById('importTournamentModal').classList.remove('active');
}

function updateImportPlayerSelections() {
    // Esta funciÃ³n evita que se seleccione el mismo jugador dos veces
    const selectedPlayers = [];
    const playerSelects = [
        'importSF1P1', 'importSF1P2', 'importSF1P3', 'importSF1P4',
        'importSF2P1', 'importSF2P2', 'importSF2P3', 'importSF2P4'
    ];

    playerSelects.forEach(selectId => {
        const value = document.getElementById(selectId).value;
        if (value) selectedPlayers.push(value);
    });

    // Deshabilitar opciones ya seleccionadas en otros dropdowns
    const season = appData.seasons[appData.currentSeason];
    playerSelects.forEach(selectId => {
        const select = document.getElementById(selectId);
        const currentValue = select.value;
        
        Array.from(select.options).forEach(option => {
            if (option.value && option.value !== currentValue) {
                option.disabled = selectedPlayers.includes(option.value);
            }
        });
    });
}

function finishImportTournament() {
    const name = document.getElementById('importTournamentName').value.trim();
    const date = document.getElementById('importTournamentDate').value;
    const type = document.getElementById('importTournamentType').value;

    if (!name || !date) {
        alert('Por favor completa el nombre y fecha del torneo');
        return;
    }

    // Obtener jugadores de ambos grupos
    const playersGA = {
        p1j1: document.getElementById('importGA_P1_J1').value,
        p1j2: document.getElementById('importGA_P1_J2').value,
        p2j1: document.getElementById('importGA_P2_J1').value,
        p2j2: document.getElementById('importGA_P2_J2').value,
        p3j1: document.getElementById('importGA_P3_J1').value,
        p3j2: document.getElementById('importGA_P3_J2').value,
        p4j1: document.getElementById('importGA_P4_J1').value,
        p4j2: document.getElementById('importGA_P4_J2').value
    };

    const playersGB = {
        p1j1: document.getElementById('importGB_P1_J1').value,
        p1j2: document.getElementById('importGB_P1_J2').value,
        p2j1: document.getElementById('importGB_P2_J1').value,
        p2j2: document.getElementById('importGB_P2_J2').value,
        p3j1: document.getElementById('importGB_P3_J1').value,
        p3j2: document.getElementById('importGB_P3_J2').value,
        p4j1: document.getElementById('importGB_P4_J1').value,
        p4j2: document.getElementById('importGB_P4_J2').value
    };

    // Validar que todos los jugadores estÃ©n seleccionados
    const allPlayersGA = Object.values(playersGA).every(p => p);
    const allPlayersGB = Object.values(playersGB).every(p => p);
    
    if (!allPlayersGA || !allPlayersGB) {
        alert('Por favor selecciona todos los jugadores de ambos grupos');
        return;
    }

    // Validar que no haya duplicados
    const allPlayers = [...Object.values(playersGA), ...Object.values(playersGB)];
    const uniquePlayers = new Set(allPlayers);
    if (uniquePlayers.size !== 16) {
        alert('No puedes seleccionar el mismo jugador mÃ¡s de una vez');
        return;
    }

    // Obtener victorias de fase de grupos
    const winsGA = {
        p1: parseInt(document.getElementById('importGA_P1_Wins').value) || 0,
        p2: parseInt(document.getElementById('importGA_P2_Wins').value) || 0,
        p3: parseInt(document.getElementById('importGA_P3_Wins').value) || 0,
        p4: parseInt(document.getElementById('importGA_P4_Wins').value) || 0
    };

    const winsGB = {
        p1: parseInt(document.getElementById('importGB_P1_Wins').value) || 0,
        p2: parseInt(document.getElementById('importGB_P2_Wins').value) || 0,
        p3: parseInt(document.getElementById('importGB_P3_Wins').value) || 0,
        p4: parseInt(document.getElementById('importGB_P4_Wins').value) || 0
    };

    // Obtener posiciones de grupos
    const posGA = {
        pos1: parseInt(document.getElementById('importGA_Pos1').value),
        pos2: parseInt(document.getElementById('importGA_Pos2').value),
        pos3: parseInt(document.getElementById('importGA_Pos3').value),
        pos4: parseInt(document.getElementById('importGA_Pos4').value)
    };

    const posGB = {
        pos1: parseInt(document.getElementById('importGB_Pos1').value),
        pos2: parseInt(document.getElementById('importGB_Pos2').value),
        pos3: parseInt(document.getElementById('importGB_Pos3').value),
        pos4: parseInt(document.getElementById('importGB_Pos4').value)
    };

    // Validar posiciones Ãºnicas
    const positionsGA = Object.values(posGA);
    const positionsGB = Object.values(posGB);
    if (new Set(positionsGA).size !== 4 || new Set(positionsGB).size !== 4) {
        alert('Las posiciones de cada grupo deben ser Ãºnicas (1, 2, 3, 4)');
        return;
    }

    // Obtener resultados de semifinales
    const sf1Sets1 = parseInt(document.getElementById('importSF1Sets1').value) || 0;
    const sf1Sets2 = parseInt(document.getElementById('importSF1Sets2').value) || 0;
    const sf2Sets1 = parseInt(document.getElementById('importSF2Sets1').value) || 0;
    const sf2Sets2 = parseInt(document.getElementById('importSF2Sets2').value) || 0;

    // Validar resultados de semifinales
    if ((sf1Sets1 + sf1Sets2 !== 2 && sf1Sets1 + sf1Sets2 !== 3) ||
        (sf2Sets1 + sf2Sets2 !== 2 && sf2Sets1 + sf2Sets2 !== 3)) {
        alert('Los resultados de semifinales deben ser 2-0, 2-1, 0-2, o 1-2');
        return;
    }

    showLoading('Importando torneo...');

    setTimeout(() => {
        const season = appData.seasons[appData.currentSeason];
        const weight = type === 'league' ? 1.0 : type === 'cup' ? 0.7 : 1.5;

        const tournament = {
            id: 't' + Date.now(),
            name: name,
            date: date,
            type: type,
            weight: weight,
            rounds: 1,
            status: 'active',
            pairs: [],
            matches: [],
            penalties: [],
            groups: [],
            playoffs: null,
            playoffsConfig: {
                enabled: true,
                qualified: 4
            }
        };

        // Crear parejas del Grupo A
        const pairsGA = [];
        for (let i = 1; i <= 4; i++) {
            const j1Key = 'p' + i + 'j1';
            const j2Key = 'p' + i + 'j2';
            const player1 = season.players.find(p => p.id === playersGA[j1Key]);
            const player2 = season.players.find(p => p.id === playersGA[j2Key]);
            
            const pair = {
                id: 'pairGA' + i,
                name: player1.name + ' - ' + player2.name,
                players: [playersGA[j1Key], playersGA[j2Key]],
                points: winsGA['p' + i] * 3,
                played: 3,
                won: winsGA['p' + i],
                lost: 3 - winsGA['p' + i],
                setsFor: 0,
                setsAgainst: 0,
                gamesFor: 0,
                gamesAgainst: 0,
                groupPosition: Object.keys(posGA).find(key => posGA[key] === i).replace('pos', '')
            };
            pairsGA.push(pair);
            tournament.pairs.push(pair);
        }

        // Crear parejas del Grupo B
        const pairsGB = [];
        for (let i = 1; i <= 4; i++) {
            const j1Key = 'p' + i + 'j1';
            const j2Key = 'p' + i + 'j2';
            const player1 = season.players.find(p => p.id === playersGB[j1Key]);
            const player2 = season.players.find(p => p.id === playersGB[j2Key]);
            
            const pair = {
                id: 'pairGB' + i,
                name: player1.name + ' - ' + player2.name,
                players: [playersGB[j1Key], playersGB[j2Key]],
                points: winsGB['p' + i] * 3,
                played: 3,
                won: winsGB['p' + i],
                lost: 3 - winsGB['p' + i],
                setsFor: 0,
                setsAgainst: 0,
                gamesFor: 0,
                gamesAgainst: 0,
                groupPosition: Object.keys(posGB).find(key => posGB[key] === i).replace('pos', '')
            };
            pairsGB.push(pair);
            tournament.pairs.push(pair);
        }

        // Crear grupos
        tournament.groups = [
            {
                id: 'groupA',
                name: 'Grupo A',
                pairs: pairsGA.map(p => p.id)
            },
            {
                id: 'groupB',
                name: 'Grupo B',
                pairs: pairsGB.map(p => p.id)
            }
        ];

        // Crear partidos de grupo (completados)
        let matchId = 1;
        pairsGA.forEach((pair, index) => {
            for (let j = index + 1; j < pairsGA.length; j++) {
                tournament.matches.push({
                    id: 'm' + matchId++,
                    round: 1,
                    groupId: 'groupA',
                    groupName: 'Grupo A',
                    pair1: pair.id,
                    pair2: pairsGA[j].id,
                    pair1Players: pair.players,
                    pair2Players: pairsGA[j].players,
                    status: 'completed',
                    result: { winner: pair.id, loser: pairsGA[j].id },
                    type: 'group_stage'
                });
            }
        });

        pairsGB.forEach((pair, index) => {
            for (let j = index + 1; j < pairsGB.length; j++) {
                tournament.matches.push({
                    id: 'm' + matchId++,
                    round: 1,
                    groupId: 'groupB',
                    groupName: 'Grupo B',
                    pair1: pair.id,
                    pair2: pairsGB[j].id,
                    pair1Players: pair.players,
                    pair2Players: pairsGB[j].players,
                    status: 'completed',
                    result: { winner: pair.id, loser: pairsGB[j].id },
                    type: 'group_stage'
                });
            }
        });

        // Identificar semifinalistas
        const ga1st = pairsGA.find(p => p.groupPosition === '1');
        const ga2nd = pairsGA.find(p => p.groupPosition === '2');
        const gb1st = pairsGB.find(p => p.groupPosition === '1');
        const gb2nd = pairsGB.find(p => p.groupPosition === '2');

        // Crear estructura de playoffs
        const playoffs = {
            semifinals: [],
            final: null,
            thirdPlace: null
        };

        // Semifinal 1: 1Âº GA vs 2Âº GB (ya jugada)
        const sf1Winner = sf1Sets1 > sf1Sets2 ? ga1st.id : gb2nd.id;
        const sf1Loser = sf1Winner === ga1st.id ? gb2nd.id : ga1st.id;
        
        playoffs.semifinals.push({
            id: 'psf1',
            name: 'Semifinal 1',
            pair1: ga1st.id,
            pair2: gb2nd.id,
            pair1Players: ga1st.players,
            pair2Players: gb2nd.players,
            status: 'completed',
            result: {
                winner: sf1Winner,
                loser: sf1Loser,
                sets1: sf1Sets1,
                sets2: sf1Sets2,
                sets: [{ team1: 6, team2: 0 }, { team1: 6, team2: 0 }]
            },
            type: 'semifinal'
        });

        // Semifinal 2: 1Âº GB vs 2Âº GA (ya jugada)
        const sf2Winner = sf2Sets1 > sf2Sets2 ? gb1st.id : ga2nd.id;
        const sf2Loser = sf2Winner === gb1st.id ? ga2nd.id : gb1st.id;
        
        playoffs.semifinals.push({
            id: 'psf2',
            name: 'Semifinal 2',
            pair1: gb1st.id,
            pair2: ga2nd.id,
            pair1Players: gb1st.players,
            pair2Players: ga2nd.players,
            status: 'completed',
            result: {
                winner: sf2Winner,
                loser: sf2Loser,
                sets1: sf2Sets1,
                sets2: sf2Sets2,
                sets: [{ team1: 6, team2: 0 }, { team1: 6, team2: 0 }]
            },
            type: 'semifinal'
        });

        // Final (pendiente)
        const sf1WinnerPair = tournament.pairs.find(p => p.id === sf1Winner);
        const sf2WinnerPair = tournament.pairs.find(p => p.id === sf2Winner);
        
        playoffs.final = {
            id: 'pf',
            name: 'Final',
            pair1: sf1Winner,
            pair2: sf2Winner,
            pair1Players: sf1WinnerPair.players,
            pair2Players: sf2WinnerPair.players,
            status: 'pending',
            result: null,
            type: 'final'
        };

        // Tercer lugar (pendiente)
        const sf1LoserPair = tournament.pairs.find(p => p.id === sf1Loser);
        const sf2LoserPair = tournament.pairs.find(p => p.id === sf2Loser);
        
        playoffs.thirdPlace = {
            id: 'p3rd',
            name: '3er Lugar',
            pair1: sf1Loser,
            pair2: sf2Loser,
            pair1Players: sf1LoserPair.players,
            pair2Players: sf2LoserPair.players,
            status: 'pending',
            result: null,
            type: 'third_place'
        };

        tournament.playoffs = playoffs;

        season.tournaments.push(tournament);
        saveData(appData);

        hideLoading();
        closeImportTournamentModal();
        showSection('playoffs');
        populatePlayoffsTournamentSelect();
        document.getElementById('playoffsTournamentSelect').

    // Obtener jugadores seleccionados
    const players = {
        sf1p1: document.getElementById('importSF1P1').value,
        sf1p2: document.getElementById('importSF1P2').value,
        sf1p3: document.getElementById('importSF1P3').value,
        sf1p4: document.getElementById('importSF1P4').value,
        sf2p1: document.getElementById('importSF2P1').value,
        sf2p2: document.getElementById('importSF2P2').value,
        sf2p3: document.getElementById('importSF2P3').value,
        sf2p4: document.getElementById('importSF2P4').value
    };

    // Validar que todos los jugadores estÃ©n seleccionados
    const allSelected = Object.values(players).every(p => p);
    if (!allSelected) {
        alert('Por favor selecciona todos los jugadores');
        return;
    }

    // Validar que no haya duplicados
    const uniquePlayers = new Set(Object.values(players));
    if (uniquePlayers.size !== 8) {
        alert('No puedes seleccionar el mismo jugador mÃ¡s de una vez');
        return;
    }

    // Obtener resultados de semifinales
    const sf1Sets1 = parseInt(document.getElementById('importSF1Sets1').value) || 0;
    const sf1Sets2 = parseInt(document.getElementById('importSF1Sets2').value) || 0;
    const sf2Sets1 = parseInt(document.getElementById('importSF2Sets1').value) || 0;
    const sf2Sets2 = parseInt(document.getElementById('importSF2Sets2').value) || 0;

    // Validar resultados de semifinales
    if ((sf1Sets1 + sf1Sets2 !== 2 && sf1Sets1 + sf1Sets2 !== 3) ||
        (sf2Sets1 + sf2Sets2 !== 2 && sf2Sets1 + sf2Sets2 !== 3)) {
        alert('Los resultados de semifinales deben ser 2-0, 2-1, 0-2, o 1-2');
        return;
    }

    showLoading('Importando torneo...');

    setTimeout(() => {
        const season = appData.seasons[appData.currentSeason];
        
        const weight = type === 'league' ? 1.0 : type === 'cup' ? 0.7 : 1.5;

        const tournament = {
            id: 't' + Date.now(),
            name: name,
            date: date,
            type: type,
            weight: weight,
            rounds: 1,
            status: 'active',
            pairs: [],
            matches: [],
            penalties: [],
            groups: [],
            playoffs: null,
            playoffsConfig: {
                enabled: true,
                qualified: 4
            }
        };

        // Crear las 4 parejas
        const pairIds = [];
        
        // Pareja 1 (SF1 - Pareja 1)
        const pair1 = {
            id: 'pair1',
            name: season.players.find(p => p.id === players.sf1p1).name + ' - ' + 
                  season.players.find(p => p.id === players.sf1p2).name,
            players: [players.sf1p1, players.sf1p2],
            points: 0,
            played: 0,
            won: 0,
            lost: 0,
            setsFor: 0,
            setsAgainst: 0,
            gamesFor: 0,
            gamesAgainst: 0
        };
        tournament.pairs.push(pair1);
        pairIds.push(pair1.id);

        // Pareja 2 (SF1 - Pareja 2)
        const pair2 = {
            id: 'pair2',
            name: season.players.find(p => p.id === players.sf1p3).name + ' - ' + 
                  season.players.find(p => p.id === players.sf1p4).name,
            players: [players.sf1p3, players.sf1p4],
            points: 0,
            played: 0,
            won: 0,
            lost: 0,
            setsFor: 0,
            setsAgainst: 0,
            gamesFor: 0,
            gamesAgainst: 0
        };
        tournament.pairs.push(pair2);
        pairIds.push(pair2.id);

        // Pareja 3 (SF2 - Pareja 1)
        const pair3 = {
            id: 'pair3',
            name: season.players.find(p => p.id === players.sf2p1).name + ' - ' + 
                  season.players.find(p => p.id === players.sf2p2).name,
            players: [players.sf2p1, players.sf2p2],
            points: 0,
            played: 0,
            won: 0,
            lost: 0,
            setsFor: 0,
            setsAgainst: 0,
            gamesFor: 0,
            gamesAgainst: 0
        };
        tournament.pairs.push(pair3);
        pairIds.push(pair3.id);

        // Pareja 4 (SF2 - Pareja 2)
        const pair4 = {
            id: 'pair4',
            name: season.players.find(p => p.id === players.sf2p3).name + ' - ' + 
                  season.players.find(p => p.id === players.sf2p4).name,
            players: [players.sf2p3, players.sf2p4],
            points: 0,
            played: 0,
            won: 0,
            lost: 0,
            setsFor: 0,
            setsAgainst: 0,
            gamesFor: 0,
            gamesAgainst: 0
        };
        tournament.pairs.push(pair4);
        pairIds.push(pair4.id);

        // Crear estructura de playoffs con semifinales ya jugadas
        const playoffs = {
            semifinals: [],
            final: null,
            thirdPlace: null
        };

        // Semifinal 1 (ya jugada)
        const sf1Winner = sf1Sets1 > sf1Sets2 ? pair1.id : pair2.id;
        const sf1Loser = sf1Winner === pair1.id ? pair2.id : pair1.id;
        
        playoffs.semifinals.push({
            id: 'psf1',
            name: 'Semifinal 1',
            pair1: pair1.id,
            pair2: pair2.id,
            pair1Players: pair1.players,
            pair2Players: pair2.players,
            status: 'completed',
            result: {
                winner: sf1Winner,
                loser: sf1Loser,
                sets1: sf1Sets1,
                sets2: sf1Sets2,
                sets: [
                    { team1: 6, team2: 0 },
                    { team1: 6, team2: 0 }
                ]
            },
            type: 'semifinal'
        });

        // Semifinal 2 (ya jugada)
        const sf2Winner = sf2Sets1 > sf2Sets2 ? pair3.id : pair4.id;
        const sf2Loser = sf2Winner === pair3.id ? pair4.id : pair3.id;
        
        playoffs.semifinals.push({
            id: 'psf2',
            name: 'Semifinal 2',
            pair1: pair3.id,
            pair2: pair4.id,
            pair1Players: pair3.players,
            pair2Players: pair4.players,
            status: 'completed',
            result: {
                winner: sf2Winner,
                loser: sf2Loser,
                sets1: sf2Sets1,
                sets2: sf2Sets2,
                sets: [
                    { team1: 6, team2: 0 },
                    { team1: 6, team2: 0 }
                ]
            },
            type: 'semifinal'
        });

        // Final (pendiente)
        const sf1WinnerPair = tournament.pairs.find(p => p.id === sf1Winner);
        const sf2WinnerPair = tournament.pairs.find(p => p.id === sf2Winner);
        
        playoffs.final = {
            id: 'pf',
            name: 'Final',
            pair1: sf1Winner,
            pair2: sf2Winner,
            pair1Players: sf1WinnerPair.players,
            pair2Players: sf2WinnerPair.players,
            status: 'pending',
            result: null,
            type: 'final'
        };

        // Tercer lugar (pendiente)
        const sf1LoserPair = tournament.pairs.find(p => p.id === sf1Loser);
        const sf2LoserPair = tournament.pairs.find(p => p.id === sf2Loser);
        
        playoffs.thirdPlace = {
            id: 'p3rd',
            name: '3er Lugar',
            pair1: sf1Loser,
            pair2: sf2Loser,
            pair1Players: sf1LoserPair.players,
            pair2Players: sf2LoserPair.players,
            status: 'pending',
            result: null,
            type: 'third_place'
        };

        tournament.playoffs = playoffs;

        season.tournaments.push(tournament);
        saveData(appData);

        hideLoading();
        closeImportTournamentModal();
        showSection('playoffs');
        populatePlayoffsTournamentSelect();
        document.getElementById('playoffsTournamentSelect').value = tournament.id;
        renderPlayoffs();

        showNotification('Torneo importado correctamente. Ahora registra la final y el tercer lugar.', 'success');
    }, 500);
}
        document.addEventListener('DOMContentLoaded', () => {
            console.log('Sistema de Liga de PÃ¡del v2.1 inicializado');
            renderDashboard();
            
            document.getElementById('currentSeason').textContent = appData.currentSeason;
            document.getElementById('totalPlayers').textContent = appData.seasons[appData.currentSeason].players.length;
        });
    </script>
</body>
</html>
